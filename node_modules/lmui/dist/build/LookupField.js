(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("jquery"), require("Vue"), require("lodash"));
	else if(typeof define === 'function' && define.amd)
		define(["jquery", "Vue", "lodash"], factory);
	else if(typeof exports === 'object')
		exports["LookupField"] = factory(require("jquery"), require("Vue"), require("lodash"));
	else
		root["LMUI"] = root["LMUI"] || {}, root["LMUI"]["LookupField"] = factory(root["$"], root["Vue"], root["_"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_15__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 47);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

/* globals __VUE_SSR_CONTEXT__ */

// this module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle

module.exports = function normalizeComponent (
  rawScriptExports,
  compiledTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier /* server only */
) {
  var esModule
  var scriptExports = rawScriptExports = rawScriptExports || {}

  // ES6 modules interop
  var type = typeof rawScriptExports.default
  if (type === 'object' || type === 'function') {
    esModule = rawScriptExports
    scriptExports = rawScriptExports.default
  }

  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (compiledTemplate) {
    options.render = compiledTemplate.render
    options.staticRenderFns = compiledTemplate.staticRenderFns
  }

  // scopedId
  if (scopeId) {
    options._scopeId = scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = injectStyles
  }

  if (hook) {
    var functional = options.functional
    var existing = functional
      ? options.render
      : options.beforeCreate
    if (!functional) {
      // inject component registration as beforeCreate hook
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    } else {
      // register for functioal component in vue file
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return existing(h, context)
      }
    }
  }

  return {
    esModule: esModule,
    exports: scriptExports,
    options: options
  }
}


/***/ }),
/* 1 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function($) {

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vue = __webpack_require__(5);

var _vue2 = _interopRequireDefault(_vue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

$.fn.addSVGClass = function (className) {
    var $svg = $(this);
    if ($svg.length > 0) {
        var svgEl = $svg[0];
        if (svgEl.classList) {
            svgEl.classList.add(className);
        } else {
            var className = $svg.attr('class') || '';
            $svg.attr('class', className + ' ' + className);
        }
    }
    return this;
};

$.fn.removeSVGClass = function (className) {
    var $svg = $(this);
    if ($svg.length > 0) {
        var svgEl = $svg[0];
        if (svgEl.classList) {
            svgEl.classList.remove(className);
        } else {
            $svg.attr('class', ($svg.attr('class') || '').replace(className, ' '));
        }
    }
    return this;
};

//https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex
if (!Array.prototype.findIndex) {
    Array.prototype.findIndex = function (predicate) {
        if (this === null) {
            throw new TypeError('Array.prototype.findIndex called on null or undefined');
        }
        if (typeof predicate !== 'function') {
            throw new TypeError('predicate must be a function');
        }
        var list = Object(this);
        var length = list.length >>> 0;
        var thisArg = arguments[1];
        var value;

        for (var i = 0; i < length; i++) {
            value = list[i];
            if (predicate.call(thisArg, value, i, list)) {
                return i;
            }
        }
        return -1;
    };
}

//https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/find
if (!Array.prototype.find) {
    Object.defineProperty(Array.prototype, 'find', {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function value(predicate) {
            if (this == null) {
                throw new TypeError('Array.prototype.find called on null or undefined');
            }
            if (typeof predicate !== 'function') {
                throw new TypeError('predicate must be a function');
            }
            var list = Object(this);
            var length = list.length >>> 0;
            var thisArg = arguments[1];
            var value;

            for (var i = 0; i < length; i++) {
                if (i in list) {
                    value = list[i];
                    if (predicate.call(thisArg, value, i, list)) {
                        return value;
                    }
                }
            }
            return undefined;
        }
    });
}

var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
};

var createEscaper = function createEscaper(map) {
    var escaper = function escaper(match) {
        return map[match];
    };

    var source = '(?:' + Object.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function (string) {
        string = string == null ? '' : '' + string;
        return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
};

var utils = {
    escape: createEscaper(escapeMap),

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     **/
    escapeRegExp: function escapeRegExp(str) {
        var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
        var reHasRegExpChar = RegExp(reRegExpChar.source);
        return str && reHasRegExpChar.test(str) ? str.replace(reRegExpChar, '\\$&') : str;
    },

    parseJSON: function parseJSON(objOrStr) {
        var ret;

        if (_vue2.default.util.isObject(objOrStr)) {
            ret = objOrStr;
        } else {
            try {
                ret = JSON.parse(String(objOrStr));
            } catch (e) {
                ret = {};
            }
        }

        return ret;
    },

    debounce: function debounce(func, wait, immediate) {
        var timeout, args, context, timestamp, result;

        var later = function later() {
            var last = new Date().getTime() - timestamp;

            if (last < wait && last >= 0) {
                timeout = setTimeout(later, wait - last);
            } else {
                timeout = null;
                if (!immediate) {
                    result = func.apply(context, args);
                    if (!timeout) context = args = null;
                }
            }
        };

        return function () {
            context = this;
            args = arguments;
            timestamp = new Date().getTime();
            var callNow = immediate && !timeout;
            if (!timeout) timeout = setTimeout(later, wait);
            if (callNow) {
                result = func.apply(context, args);
                context = args = null;
            }

            return result;
        };
    }

};

exports.default = utils;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 4 */,
/* 5 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_5__;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(9),
  /* template */
  __webpack_require__(11),
  /* styles */
  null,
  /* scopeId */
  null,
  /* moduleIdentifier (server only) */
  null
)

module.exports = Component.exports


/***/ }),
/* 7 */,
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  // like $(el).data(key)
  getElData: function getElData(el, key) {
    var dataset = el.dataset;
    if (dataset) {
      return dataset[key];
    } else {
      return undefined;
    }
  },

  getElWidth: function getElWidth(el) {
    var width = getComputedStyle(el).width.split('px')[0];
    if (isNaN(width)) {
      throw new Error({ msg: 'width is not a number' });
    }
    return width;
  },
  setElWidth: function setElWidth(el, width) {
    if (typeof width === 'string') {
      el.style.width = width;
    } else {
      el.style.width = width + 'px';
    }
  },
  getClosetEl: function getClosetEl(oriEl, selector) {
    var matchesFn = void 0;
    var parent = void 0;

    // Try to use original match method
    ['matches', 'webkitMatchesSelector', 'mozMatchesSelector', 'msMatchesSelector', 'oMatchesSelector'].some(function (fn) {
      if (typeof document.body[fn] == 'function') {
        matchesFn = fn;
        return true;
      }
      return false;
    });

    if (!matchesFn) {
      // polyfill match method for IE
      (function (ElementPrototype) {
        ElementPrototype.matches = function (selector) {
          var node = this,
              nodes = (node.parentNode || node.document).querySelectorAll(selector),
              i = -1;
          while (nodes[++i] && nodes[i] != node) {}
          return !!nodes[i];
        };
      })(Element.prototype);
    }
    // traverse parents
    while (oriEl !== null) {
      parent = oriEl.parentNode;
      if (parent !== null && parent[matchesFn](selector)) {
        return parent;
      }
      oriEl = parent;
    }

    return null;
  }
};

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function($) {

Object.defineProperty(exports, "__esModule", {
    value: true
});

__webpack_require__(1);

__webpack_require__(10);

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

var Toggle = {
    props: {
        customClass: {
            type: [String],
            default: ''
        },

        // if locked is true, can't change active status
        locked: {
            type: [Boolean],
            default: false
        },
        /**
         * active status, true or false
         */
        isActiveAtInit: {
            type: [Boolean],
            default: false
        },

        /**
         * active color class, the predefined values are "red", "green", "blue"
         * the class active-color-is-colorname will be added on .toggle-wrapper element
         */
        activeColor: {
            type: String,
            default: 'green'
        },

        /**
         * not-active color class, the predefined values are "red", "green", "blue"
         * the class not-active-color-is-colorname will be added on .toggle-wrapper element
         */
        notActiveColor: {
            type: String
        },

        /**
         * the callback which will be executed as:
         * function callback(changedActiveStatus, $vm)
         */
        onSwitch: {
            type: Function
        },

        /**
         * The text for not active(left) text
         */
        notActiveText: {
            type: String,
            default: 'OFF'
        },

        /**
         * The text for active(right) text
         */
        activeText: {
            type: String,
            default: 'ON'
        },

        /**
         * when this is passed in, the active/not-active text will be removed
         * the iconConf obj should be like:
         * {
         *   id: 'icon-settings',
         *   size: '18'
         * }
         */
        iconConf: {
            type: Object,
            default: function _default() {
                return {};
            }
        },

        size: {
            type: String,
            default: 'normal' //'normal' or 'small' DEV-29307 UI: Toggle styling fixes
        }
    },
    computed: {
        colorClass: function colorClass() {
            var colorClassObj = {};
            colorClassObj['active-color-is-' + this.activeColor] = this.activeColor;
            colorClassObj['not-active-color-is-' + this.notActiveColor] = this.notActiveColor;
            return colorClassObj;
        },
        iconMode: function iconMode() {
            return !!this.iconConf.id;
        }
    },
    methods: {
        switchToggle: function switchToggle(e) {
            if (this.locked) {
                return;
            }

            //DEV-29307
            //If the toggle has labels on each side (eg. On/Off), clicking the label on either side should move the toggle to that side.
            //If the toggle has only one label (eg. Treat as glob), clicking the label should change the state of the toggle.
            var $el = $(e.currentTarget);
            var ifSingleText = this.activeText && !this.notActiveText || !this.activeText && this.notActiveText;
            if (!ifSingleText && $el.hasClass('toggle-off') && $el.hasClass('left-active')) {
                return;
            }
            if (!ifSingleText && $el.hasClass('toggle-on') && $el.hasClass('right-active')) {
                return;
            }

            this.active = !this.active;
            this.$nextTick(function () {
                if (this.onSwitch) {
                    this.onSwitch(this.active, this);
                }
            });
        }
    },
    data: function data() {
        return {
            active: this.isActiveAtInit
        };
    }
};

exports.default = Toggle;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 10 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 11 */
/***/ (function(module, exports) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "lmui-toggle",
    class: [_vm.customClass, _vm.size]
  }, [_c('div', {
    staticClass: "toggle-wrapper toggle-button clearfix",
    class: [_vm.colorClass, {
      locked: _vm.locked
    }]
  }, [(!_vm.iconMode) ? [(_vm.notActiveText) ? _c('span', {
    staticClass: "toggle-off",
    class: {
      'left-active': !_vm.active
    },
    on: {
      "click": _vm.switchToggle
    }
  }, [_vm._v("\n                " + _vm._s(_vm.notActiveText) + "\n            ")]) : _vm._e()] : _vm._e(), _vm._v(" "), (_vm.iconMode) ? [(!_vm.active) ? _c('span', {
    staticClass: "toggle-off toggle-off-icon",
    class: {
      'left-active': !_vm.active
    },
    on: {
      "click": _vm.switchToggle
    }
  }, [_c('svg', {
    class: 'icons' + _vm.iconConf.size + ' ' + (_vm.iconConf.color ? ('icon-' + _vm.iconConf.color) : 'icon-gray') + ' ' + _vm.iconConf.id
  }, [_c('use', {
    attrs: {
      "xlink:href": '#' + _vm.iconConf.id
    }
  })])]) : _c('span', {
    staticClass: "toggle-on toggle-on-icon",
    class: {
      'right-active': _vm.active
    },
    on: {
      "click": _vm.switchToggle
    }
  }, [_c('svg', {
    class: 'icons' + _vm.iconConf.size
  }, [_c('use', {
    attrs: {
      "xlink:href": '#' + _vm.iconConf.id
    }
  })])])] : _vm._e(), _vm._v(" "), _c('div', {
    staticClass: "toggle-button-wrap",
    class: {
      'toggle-button-active': _vm.active, 'toggle-button-not-active': !_vm.active
    },
    on: {
      "click": _vm.switchToggle
    }
  }, [_vm._m(0)]), _vm._v(" "), (!_vm.iconMode) ? [(_vm.activeText) ? _c('span', {
    staticClass: "toggle-on",
    class: {
      'right-active': _vm.active
    },
    on: {
      "click": _vm.switchToggle
    }
  }, [_vm._v("\n                " + _vm._s(_vm.activeText) + "\n            ")]) : _vm._e()] : _vm._e()], 2)])
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "toggle-button-bg"
  }, [_c('div', {
    staticClass: "toggle-button-out"
  }), _vm._v(" "), _c('div', {
    staticClass: "toggle-button-in"
  }), _vm._v(" "), _c('div', {
    staticClass: "toggle-button-switch"
  })])
}]}

/***/ }),
/* 12 */,
/* 13 */,
/* 14 */,
/* 15 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_15__;

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(18),
  /* template */
  __webpack_require__(20),
  /* styles */
  null,
  /* scopeId */
  null,
  /* moduleIdentifier (server only) */
  null
)

module.exports = Component.exports


/***/ }),
/* 17 */,
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(_, $) {

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _utils = __webpack_require__(3);

var _utils2 = _interopRequireDefault(_utils);

var _dom = __webpack_require__(8);

var _dom2 = _interopRequireDefault(_dom);

__webpack_require__(1);

__webpack_require__(19);

var _toggle = __webpack_require__(6);

var _toggle2 = _interopRequireDefault(_toggle);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } //
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

exports.default = {
    components: {
        lmToggle: _toggle2.default
    },
    props: {
        /**
         * define the initial raw items for the autocomplete
         *
         * for lookup component, the items should always be objects,
         * if the items passed to the component are not objects, we will automatically convert it to objects
         */
        items: {
            type: [Array],
            default: function _default() {
                return [];
            }
        },
        initialSelectedItem: { // the initialSelectedItem is used to track the selected item from the dropdown
            type: [Object],
            default: null
        },
        customClassForInput: { //support pass a custom class to input element
            type: [String],
            default: ''
        },
        width: {
            type: [String, Number],
            default: '100%'
        },
        placeholder: String, // define the placeholder for the lookup input
        maxlength: { // define the limit maxlength for the lookup input
            type: [String, Number],
            default: 1024
        },
        resultLimits: { // the max items displayed in the lookup dropdown
            type: [Number],
            default: 10
        },
        isDisabled: {
            type: [Boolean],
            default: false
        },

        //glob related begin
        isGlob: { // define if the lookup enable the glob mode
            type: [Boolean],
            default: false
        },
        isAllowManuallyChangeGlob: { // if user can manually operate toggle to change the glob status
            type: [Boolean],
            default: false
        },
        isInitialGlobToggleActive: {
            type: [Boolean],
            default: true
        },
        //glob related end

        isResetQueryOnFocus: { // define whether to keep the search query when the input got focus
            type: [Boolean],
            default: true
        },
        isEnableSelectMode: { // enable select mode, when select some menu item, trigger the "select" event
            type: [Boolean],
            default: false
        },
        isClearQueryAfterSelect: { // in select mode, define whether to clear the search query after select the menu item
            type: [Boolean],
            default: false
        },

        isFirstAutoGlobItemIgnoreEscape: { // DEV-32931: when user select auto suggestion value, keep the global expression chars for value
            type: [Boolean],
            default: true
        },

        displayField: { // support assign a display field, default is 'name'
            type: [String],
            default: 'name'
        },

        displayOnInputField: { //support display different data to the input field when click item from dropdown items
            type: [String],
            default: ''
        },

        treatGlobText: {
            type: [String],
            default: 'Treat as glob pattern'
        },

        onMounted: {
            type: [Function] // callback on created
        },
        onLookup: {
            type: [Function] // callback on look up triggering
        },
        onValidateQuery: {
            type: [Function], // callback on enter input
            default: function _default() {
                return function () {
                    return true;
                };
            }
        }
    },

    created: function created() {
        //set data from props
        this.selectedItem = this.initialSelectedItem;
        if (this.selectedItem) {
            // allow the user to pass a initial selectedItem to set search query
            this.searchQuery = this.selectedItem[this.displayOnInputField || this.displayField];
        }

        this.isGlobToggleActive = this.isGlob && (!this.isAllowManuallyChangeGlob || this.isInitialGlobToggleActive);
    },
    mounted: function mounted() {
        this.$nextTick(function () {
            if (this.onMounted) {
                this.onMounted();
            }
        });
    },
    data: function data() {
        return {
            searchQuery: '',
            state: 0, // 0: init, 1: onSearching, 2: showSearchedList,
            hoveringIndex: -1,
            selectedItem: null, //which item been selected
            isGlobToggleActive: true
        };
    },


    computed: {
        isGlobToggleEnabled: function isGlobToggleEnabled() {
            //parent view can use this field to get glob status
            this.isGlobToggleActive = this.isGlob && (!this.isAllowManuallyChangeGlob || this.$refs.globToggle.active || this.searchQuery === '');
            return this.isGlobToggleActive;
        },

        computedWidth: function computedWidth() {
            return Number.isInteger(Number(this.width)) ? this.width + 'px' : this.width;
        },
        /**
         *  the display items are only for displaying, it will be limited by the resultLimits
         */
        displayItems: function displayItems() {
            var parsedItems = [];
            this.items.forEach(function (item) {
                if (_.isObject(item)) {
                    if (!item.id) {
                        item.id = JSON.stringify(item);
                    }
                    parsedItems.push(item);
                } else {
                    parsedItems.push(_defineProperty({
                        id: String(item)
                    }, this.displayField, String(item)));
                }
            }, this);

            if (this.isGlobToggleActive) {
                var globItemQuery = (this.searchQuery || '').trim() + (/\*$/.test(this.searchQuery) ? '' : '*');
                var globItem = _defineProperty({
                    id: globItemQuery
                }, this.displayField, globItemQuery);

                if (this.isFirstAutoGlobItemIgnoreEscape) {
                    globItem.ignoreEscapeGlobal = true;
                }

                parsedItems = [globItem].concat(parsedItems);
            }

            return parsedItems.slice(0, this.resultLimits);
        }
    },

    methods: {
        highlightItem: function highlightItem(displayItem, displayHandle) {
            var value = void 0;
            if (displayHandle) {
                value = displayHandle(displayItem);
            } else {
                value = displayItem;
            }

            value = _utils2.default.escape(value);
            if (this.searchQuery && this.searchQuery.trim()) {
                return value.replace(new RegExp(_utils2.default.escapeRegExp(_utils2.default.escape(this.searchQuery)), 'ig'), '<span style="font-weight:normal;color: #000;">$&</span>');
            } else {
                // fix bug DEV-32717
                return value;
            }
        },

        onSwitchGlobToggle: function onSwitchGlobToggle(isActive) {
            this.$emit('globchanged', this.isGlobToggleEnabled);
        },
        onInputKeyup: function onInputKeyup(e) {
            switch (e.keyCode) {
                case 13:
                    // enter
                    this.onInputEnter();
                    break;
                case 27:
                    // esc
                    this.resetState();
                    break;
                case 40: // up or down arrow
                case 38:
                    this.doKeyboardNav(e.keyCode);
                    break;
                case 9:
                    // check the tab key to do the focus event
                    this.onInputFocus();
                    break;
                default:
                    //auto active glob toggle
                    if (this.isGlob && this.isAllowManuallyChangeGlob && (/[\*\?]+/.test(this.searchQuery) || this.searchQuery == '')) {
                        this.$refs.globToggle.active = true;
                        this.$emit('globchanged', this.isGlobToggleEnabled);
                        this.isGlobToggleActive = true;
                    }
                    this.doLookup(this.searchQuery);
            }
        },


        /**
         * call this function if the input got focus or get clicked
         * why don't directly listen to the "focus" event?
         * because we also need to listen to the "click" event, and the "click" event will cause "focus" event,
         * that will make the onInputFocus get called duplicatedly
         */
        onInputFocus: function onInputFocus() {
            this.hoveringIndex = -1;
            this.doLookup(this.isResetQueryOnFocus ? '' : this.searchQuery);
        },


        doLookup: _utils2.default.debounce(function (query) {
            //DEV-22662, if put the logic in attached method, there was a bug in SVG icon of IE
            //dynamic set lookup menu width
            var $el = $(this.$el);
            $el.find('.lookup-menu').width($el.width() - 30);

            this.state = 1;
            this._initialQuery = query;

            if (this.onLookup) {
                var me = this;
                this.onLookup(query, function () {
                    if (me.state == 1) {
                        me.state = 2;
                    }
                });
            } else {
                this.$emit('lookup', query); //deprecated, use onLookup callback instead
            }
        }, 200),

        doKeyboardNav: function doKeyboardNav(keyCode) {
            if (this.displayItems.length > 0) {
                if (keyCode == 38) {
                    // up arrow
                    if (this.hoveringIndex < 0) {
                        this.hoveringIndex = this.displayItems.length - 1;
                    } else {
                        --this.hoveringIndex;
                    }
                } else if (keyCode == 40) {
                    // down arrow
                    ++this.hoveringIndex;

                    if (this.hoveringIndex >= this.displayItems.length) {
                        this.hoveringIndex = -1;
                    }
                }

                if (this.hoveringIndex > -1) {
                    this.searchQuery = this.displayItems[this.hoveringIndex][this.displayField];
                } else if (this.hoveringIndex == -1) {
                    this.searchQuery = this._initialQuery;
                }
            }
        },
        onSelectItem: function onSelectItem(e) {
            var item = _utils2.default.parseJSON(_dom2.default.getElData(e.currentTarget, 'value'));

            //auto active glob toggle
            if (this.isGlob && this.isAllowManuallyChangeGlob && !/[\*|\?]+/.test((typeof item === 'undefined' ? 'undefined' : _typeof(item)) == 'object' ? item.name : item)) {
                if (this.isAllowManuallyChangeGlob) {
                    this.$refs.globToggle.active = false;
                    this.$emit('globchanged', this.$refs.globToggle.active);
                }
                this.isGlobToggleActive = false;
            }
            this.updateSelectItem(item);
        },
        updateSelectItem: function updateSelectItem(item) {
            // update the selected item when the user select from the dropdown
            this.selectedItem = item;

            // do not validate when the user select the item from the dropdown
            clearTimeout(this.blurTimer);

            this.selectItem(this.selectedItem);
        },
        selectItem: function selectItem(item) {
            if (this.isGlobToggleActive && this.selectedItem && !item.ignoreEscapeGlobal) {
                this.selectedItem[this.displayField] = this.selectedItem[this.displayField].replace(/\\/g, '\\\\').replace(/\(/g, '\\(').replace(/\)/g, '\\)').replace(/\[/g, '\\[').replace(/]/g, '\\]').replace(/\|/g, '\\|').replace(/!/, '\\!');
            }

            var selectedItem = item;

            if (!_.isObject(selectedItem)) {
                var searchQuery = String(item);
                selectedItem = _defineProperty({
                    id: searchQuery
                }, this.displayField, searchQuery);
            }

            this.searchQuery = selectedItem[this.displayOnInputField || this.displayField];
            this.resetState();

            if (this.isEnableSelectMode) {
                this.$emit('select', selectedItem);

                if (this.isClearQueryAfterSelect) {
                    this.searchQuery = '';

                    // need clear the selectedItem when clear the search query
                    this.selectedItem = null;
                }
            }
        },
        validateSelectedItem: function validateSelectedItem(isQueryRequired) {
            return this.searchQuery && this.selectedItem && this.selectedItem[this.displayOnInputField || this.displayField] == this.searchQuery || !isQueryRequired && !this.selectedItem && !this.searchQuery;
        },
        resetState: function resetState() {
            this.hoveringIndex = -1;
            this._initialQuery = '';
            this.state = 0;
        },
        onMouseover: function onMouseover(e) {
            var curItem = _utils2.default.parseJSON(_dom2.default.getElData(e.currentTarget, 'value'));
            var me = this;
            this.hoveringIndex = this.displayItems.findIndex(function (item) {
                return item.id == curItem.id && item[me.displayField] == curItem[me.displayField];
            });
        },
        onMouseout: function onMouseout(e) {
            this.hoveringIndex = -1;
        },
        onInputEnter: function onInputEnter() {
            var query = (this.searchQuery || '').trim();

            if (query && this.onValidateQuery(query)) {
                if (this.hoveringIndex > -1 && this.hoveringIndex < this.displayItems.length) {
                    this.selectedItem = this.displayItems[this.hoveringIndex];
                    this.selectItem(this.selectedItem);
                } else {
                    this.selectItem(_defineProperty({
                        id: query
                    }, this.displayField, query));
                }
            }
        },
        onInputBlur: function onInputBlur() {
            var me = this;

            me.$emit('inputblur', me.searchQuery);
            // if the selectItem is executed after the blur event, then we need have a chance to cancel the blur events
            this.blurTimer = setTimeout(function () {
                me.resetState();
                me.$emit('validate', me.searchQuery);
            }, 100);
        }
    },

    watch: {
        'items': function items(val, oldVal) {
            if (!this.onLookup) {
                if (this.state == 1) {
                    this.state = 2;
                }
            }
        },
        'selectedItem': function selectedItem(val, oldVal) {
            this.$emit('updateSelectedItem', val);
        }
    }
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(15), __webpack_require__(2)))

/***/ }),
/* 19 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 20 */
/***/ (function(module, exports) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "lmui-lookup-field",
    style: ({
      width: _vm.computedWidth
    }),
    on: {
      "keyup": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "esc", 27)) { return null; }
        _vm.resetState($event)
      }
    }
  }, [_c('div', {
    staticClass: "lookup-input",
    class: {
      'disabled': _vm.isDisabled
    },
    staticStyle: {
      "position": "relative"
    }
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.searchQuery),
      expression: "searchQuery"
    }],
    class: _vm.customClassForInput,
    staticStyle: {
      "width": "100%",
      "padding-left": "10px"
    },
    attrs: {
      "type": "text",
      "maxlength": _vm.maxlength,
      "placeholder": _vm.placeholder,
      "disabled": _vm.isDisabled
    },
    domProps: {
      "value": (_vm.searchQuery)
    },
    on: {
      "keyup": function($event) {
        $event.stopPropagation();
        _vm.onInputKeyup($event)
      },
      "click": _vm.onInputFocus,
      "blur": _vm.onInputBlur,
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.searchQuery = $event.target.value
      }
    }
  }), _vm._v(" "), _c('svg', {
    staticClass: "icons26 icon-gray lmui-icon-lookup"
  }, [_c('use', {
    attrs: {
      "xlink:href": "#icon-lookup-26"
    }
  })]), _vm._v(" "), (_vm.isGlob) ? _c('div', {
    staticClass: "glob-tip",
    class: {
      'enable': _vm.isGlob
    }
  }, [(_vm.isAllowManuallyChangeGlob) ? _c('lm-toggle', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (!!_vm.searchQuery),
      expression: "!!searchQuery"
    }],
    ref: "globToggle",
    attrs: {
      "active-color": "white",
      "not-active-text": "",
      "active-text": _vm.treatGlobText,
      "on-switch": _vm.onSwitchGlobToggle,
      "is-active-at-init": _vm.isInitialGlobToggleActive,
      "size": "small"
    }
  }) : _vm._e(), _vm._v(" "), _c('span', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (!_vm.searchQuery),
      expression: "!searchQuery"
    }],
    staticClass: "glob-tip-label",
    staticStyle: {
      "color": "white"
    }
  }, [_vm._v("*")]), _vm._v(" "), (!_vm.isAllowManuallyChangeGlob) ? _c('span', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (!!_vm.searchQuery),
      expression: "!!searchQuery"
    }],
    staticClass: "glob-tip-label",
    staticStyle: {
      "color": "white",
      "font-size": "12px",
      "display": "inline-block",
      "margin-top": "-4px"
    }
  }, [_vm._v(_vm._s(_vm.treatGlobText))]) : _vm._e()], 1) : _vm._e()]), _vm._v(" "), _c('div', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.state != 0),
      expression: "state != 0"
    }],
    staticClass: "lookup-menu"
  }, [_c('div', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.state == 1),
      expression: "state == 1"
    }],
    staticClass: "lookup-tip"
  }, [_c('div', {
    staticClass: "loadingcircles32",
    staticStyle: {
      "display": "inline-block",
      "position": "absolute",
      "top": "0",
      "right": "10px"
    }
  }, _vm._l(([1, 2, 3, 4, 5, 6, 7, 8]), function(number) {
    return _c('div', {
      class: 'circle32-gray circle32_0' + number
    })
  })), _c('span', [_vm._v("Searching for suggestions...")])]), _vm._v(" "), _c('div', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.state == 2 && _vm.displayItems.length > 0),
      expression: "state == 2 && displayItems.length > 0"
    }],
    staticClass: "lookup-tip"
  }, [_vm._v("Suggested Results")]), _vm._v(" "), _c('div', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.state == 2 && _vm.displayItems.length == 0),
      expression: "state == 2 && displayItems.length == 0"
    }],
    staticClass: "lookup-tip"
  }, [_vm._v("No matching result found")]), _vm._v(" "), _vm._l((_vm.displayItems), function(item, index) {
    return _c('div', {
      key: item.id,
      staticClass: "look-up-item",
      class: {
        hovering: index == _vm.hoveringIndex
      },
      attrs: {
        "data-value": JSON.stringify(item)
      },
      on: {
        "mousedown": function($event) {
          $event.stopPropagation();
          $event.preventDefault();
          _vm.onSelectItem($event)
        },
        "mouseover": _vm.onMouseover,
        "mouseout": _vm.onMouseout,
        "keyup": function($event) {
          if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
          $event.stopPropagation();
          $event.preventDefault();
          _vm.onSelectItem($event)
        }
      }
    }, [_c('span', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: (!!item.iconHtml),
        expression: "!!item.iconHtml"
      }],
      domProps: {
        "innerHTML": _vm._s(item.iconHtml)
      }
    }), _vm._v(" "), _c('span', {
      domProps: {
        "innerHTML": _vm._s(_vm.highlightItem(item[_vm.displayField], item['displayHandle']))
      }
    })])
  }), _vm._v(" "), _c('div', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.state == 2 && _vm.items.length > _vm.displayItems.length),
      expression: "state == 2 && items.length > displayItems.length"
    }],
    staticClass: "lookup-tip"
  }, [_vm._v("Keep typing to refine results")])], 2)])
},staticRenderFns: []}

/***/ }),
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */,
/* 31 */,
/* 32 */,
/* 33 */,
/* 34 */,
/* 35 */,
/* 36 */,
/* 37 */,
/* 38 */,
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */,
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */,
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(16);


/***/ })
/******/ ]);
});
//# sourceMappingURL=LookupField.js.map