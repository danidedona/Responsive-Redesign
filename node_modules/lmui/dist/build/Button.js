(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Button"] = factory();
	else
		root["LMUI"] = root["LMUI"] || {}, root["LMUI"]["Button"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 49);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports) {

/* globals __VUE_SSR_CONTEXT__ */

// this module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle

module.exports = function normalizeComponent (
  rawScriptExports,
  compiledTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier /* server only */
) {
  var esModule
  var scriptExports = rawScriptExports = rawScriptExports || {}

  // ES6 modules interop
  var type = typeof rawScriptExports.default
  if (type === 'object' || type === 'function') {
    esModule = rawScriptExports
    scriptExports = rawScriptExports.default
  }

  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (compiledTemplate) {
    options.render = compiledTemplate.render
    options.staticRenderFns = compiledTemplate.staticRenderFns
  }

  // scopedId
  if (scopeId) {
    options._scopeId = scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = injectStyles
  }

  if (hook) {
    var functional = options.functional
    var existing = functional
      ? options.render
      : options.beforeCreate
    if (!functional) {
      // inject component registration as beforeCreate hook
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    } else {
      // register for functioal component in vue file
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return existing(h, context)
      }
    }
  }

  return {
    esModule: esModule,
    exports: scriptExports,
    options: options
  }
}


/***/ }),

/***/ 1:
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ 12:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

__webpack_require__(1);

__webpack_require__(13);

var _buttonProps = __webpack_require__(7);

var _buttonProps2 = _interopRequireDefault(_buttonProps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    props: _buttonProps2.default,
    data: function data() {
        return {
            isActive: this.isActiveAtInit
        };
    },

    computed: {
        isIconPassed: function isIconPassed() {
            return !!(this.realIcon && this.realIcon.id);
        },
        isTextPassed: function isTextPassed() {
            return this.realText != undefined;
        },
        realIcon: function realIcon() {
            if (this.type == 'toggle' && this.isActive) {
                return this.normalizedActiveIcon;
            } else {
                return this.normalizedIcon;
            }
        },
        realText: function realText() {
            if (this.type == 'toggle' && this.isActive) {
                return this.activeText;
            } else {
                return this.text;
            }
        },
        normalizedIcon: function normalizedIcon() {
            var icon = this._getNormalizedIcon(this.icon);
            var retIcon;

            if (icon) {
                retIcon = {};
                Object.assign(retIcon, icon);

                if (!icon.theme && this.theme == 'blue') {
                    retIcon.theme = 'white';
                }

                retIcon.theme = this.transformIconColor(retIcon.theme);
            }

            return retIcon;
        },
        normalizedSplitIcon: function normalizedSplitIcon() {
            var icon = this._getNormalizedIcon(this.splitIcon);
            var retIcon;

            if (icon) {
                retIcon = {};
                Object.assign(retIcon, icon);

                if (!icon.theme && this.normalizedIcon && this.normalizedIcon.theme) {
                    retIcon.theme = this.normalizedIcon.theme;
                }

                retIcon.theme = this.transformIconColor(retIcon.theme);
            }

            return retIcon;
        },
        normalizedActiveIcon: function normalizedActiveIcon() {
            var icon = this._getNormalizedIcon(this.activeIcon);
            var retIcon;

            if (icon) {
                retIcon = {};
                Object.assign(retIcon, icon);

                retIcon.theme = this.transformIconColor(retIcon.theme, 'white');
            }

            return retIcon;
        },
        normalizedIconPosition: function normalizedIconPosition() {
            var defaultIconPosition = this.type == 'menu' ? 'right' : 'left';
            return this.iconPosition || defaultIconPosition;
        },
        normalizedSplitBtnTheme: function normalizedSplitBtnTheme() {
            return this.splitBtnTheme || this.theme;
        }
    },

    methods: {
        transformIconColor: function transformIconColor(color) {
            var defaultColor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'gray';

            var colorMap = {
                blue: 'primary1',
                lightGray: 'light-gray'
            };

            return colorMap[color] || color || defaultColor;
        },
        onClickButton: function onClickButton(e) {
            var me = this;
            this.isActive = !this.isActive;

            this.$nextTick(function () {
                me.$emit('toggle', me.isActive, this);
            });
        },
        _getNormalizedIcon: function _getNormalizedIcon(icon) {
            if (icon) {
                if (typeof icon == 'string') {
                    icon = {
                        id: icon
                    };
                }

                icon.size = icon.size || 18;
            }

            return icon;
        }
    }
};

// vue loader can't export anything except default

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/***/ }),

/***/ 13:
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ 14:
/***/ (function(module, exports) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    style: ('display:inline-block;' + _vm.style)
  }, [_c('button', {
    class: 'lm-button ' + (_vm.isActive ? 'active ' : ' ') + _vm.type + '-button ' + _vm.theme +
      ' ' + _vm.size + ' ' + (_vm.isAnimate ? 'animate ' : ' ') + (_vm.type == 'split' ? 'split-left ' : ''),
    attrs: {
      "disabled": _vm.isDisabled
    },
    on: {
      "click": _vm.onClickButton
    }
  }, [(_vm.realIcon && _vm.realIcon.id && _vm.normalizedIconPosition == 'left') ? _c('svg', {
    class: 'icons' + _vm.realIcon.size + ' icon-' + _vm.realIcon.theme
  }, [_c('use', {
    attrs: {
      "xlink:href": '#' + _vm.realIcon.id
    }
  })]) : _vm._e(), _vm._v(" "), (!_vm.isIconPassed || !_vm.isTextPassed) ? _vm._t("default") : _vm._e(), _vm._v(" "), (_vm.isTextPassed) ? [_vm._v("\n            " + _vm._s(_vm.realText) + "\n        ")] : _vm._e(), _vm._v(" "), (_vm.realIcon && _vm.realIcon.id && _vm.normalizedIconPosition == 'right') ? _c('svg', {
    class: 'icons' + _vm.realIcon.size + ' icon-' + _vm.realIcon.theme
  }, [_c('use', {
    attrs: {
      "xlink:href": '#' + _vm.realIcon.id
    }
  })]) : _vm._e()], 2), _vm._v(" "), (_vm.type == 'split') ? _c('button', {
    class: 'lm-button split-right ' + _vm.normalizedSplitBtnTheme + ' ' + (_vm.isAnimate ? 'animate' : '')
  }, [(_vm.normalizedSplitIcon && _vm.normalizedSplitIcon.id) ? _c('svg', {
    class: 'icons' + _vm.normalizedSplitIcon.size + ' icon-' + _vm.normalizedSplitIcon.theme
  }, [_c('use', {
    attrs: {
      "xlink:href": '#' + _vm.normalizedSplitIcon.id
    }
  })]) : _vm._e(), _vm._v("\n        " + _vm._s(_vm.splitBtnText) + "\n    ")]) : _vm._e()])
},staticRenderFns: []}

/***/ }),

/***/ 4:
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(12),
  /* template */
  __webpack_require__(14),
  /* styles */
  null,
  /* scopeId */
  null,
  /* moduleIdentifier (server only) */
  null
)

module.exports = Component.exports


/***/ }),

/***/ 49:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(4);


/***/ }),

/***/ 7:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var iconPropConfig = {
  type: [Object, String]
};

var propThemeConfig = {
  type: [String],
  default: 'gray',
  validator: function validator(value) {
    return ['blue', 'gray', 'white'].indexOf(value) > -1;
  }
};

exports.default = {
  /**
   * define the button type the type can be plain, icon, split, menu and toggle buttons
   */
  type: {
    type: [String],
    default: 'plain',
    validator: function validator(value) {
      return ['plain', 'icon', 'split', 'menu', 'toggle'].indexOf(value) > -1;
    }
  },
  /**
   * define button size, the type can be empty, small, small-small
   */
  size: {
    type: [String],
    default: ''
  },
  /**
   * define the theme of the button, the theme can be gray, blue and white
   */
  theme: propThemeConfig,
  isAnimate: {
    type: [Boolean],
    default: true
  },
  isDisabled: {
    type: [Boolean],
    default: false
  },
  /**
   * Specify the icon of the button
   * example:
   * icon="icon-settings"
   * icon="{size: 26, theme: 'gray', id: 'icon-lookup-26'}"
   */
  icon: {
    type: [Object, String]
  },
  /**
   * iconPosition means the position of the icon relative to the button text
   * example:
   * icon-position="left"
   * icon-position="right"
   */
  iconPosition: {
    type: [String]
  },
  /**
   * Define the button text
   */
  text: {
    type: [String]
  },
  /**
   * Specify the split icon for the split buttons, the config style is the same with the icon
   */
  splitIcon: {
    type: [Object, String]
  },
  /**
   * Specify the button text of the split button
   */
  splitBtnText: {
    type: [String]
  },
  /**
   * Specify the theme of the split button
   */
  splitBtnTheme: {
    type: [String],
    validator: function validator(value) {
      return ['blue', 'gray', 'white'].indexOf(value) > -1;
    }
  },
  /**
   * Specify the icon of the toggle button in active status
   */
  activeIcon: {
    type: [Object, String]
  },
  /**
   * Specify the text of the toggle button in active status
   */
  activeText: {
    type: [String]
  },
  isActiveAtInit: {
    type: [Boolean],
    default: false
  },
  style: {
    type: [String],
    default: ''
  }
};

/***/ })

/******/ });
});
//# sourceMappingURL=Button.js.map