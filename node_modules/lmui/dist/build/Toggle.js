(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("jquery"));
	else if(typeof define === 'function' && define.amd)
		define(["jquery"], factory);
	else if(typeof exports === 'object')
		exports["Toggle"] = factory(require("jquery"));
	else
		root["LMUI"] = root["LMUI"] || {}, root["LMUI"]["Toggle"] = factory(root["$"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_2__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 53);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports) {

/* globals __VUE_SSR_CONTEXT__ */

// this module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle

module.exports = function normalizeComponent (
  rawScriptExports,
  compiledTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier /* server only */
) {
  var esModule
  var scriptExports = rawScriptExports = rawScriptExports || {}

  // ES6 modules interop
  var type = typeof rawScriptExports.default
  if (type === 'object' || type === 'function') {
    esModule = rawScriptExports
    scriptExports = rawScriptExports.default
  }

  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (compiledTemplate) {
    options.render = compiledTemplate.render
    options.staticRenderFns = compiledTemplate.staticRenderFns
  }

  // scopedId
  if (scopeId) {
    options._scopeId = scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = injectStyles
  }

  if (hook) {
    var functional = options.functional
    var existing = functional
      ? options.render
      : options.beforeCreate
    if (!functional) {
      // inject component registration as beforeCreate hook
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    } else {
      // register for functioal component in vue file
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return existing(h, context)
      }
    }
  }

  return {
    esModule: esModule,
    exports: scriptExports,
    options: options
  }
}


/***/ }),

/***/ 1:
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ 10:
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ 11:
/***/ (function(module, exports) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "lmui-toggle",
    class: [_vm.customClass, _vm.size]
  }, [_c('div', {
    staticClass: "toggle-wrapper toggle-button clearfix",
    class: [_vm.colorClass, {
      locked: _vm.locked
    }]
  }, [(!_vm.iconMode) ? [(_vm.notActiveText) ? _c('span', {
    staticClass: "toggle-off",
    class: {
      'left-active': !_vm.active
    },
    on: {
      "click": _vm.switchToggle
    }
  }, [_vm._v("\n                " + _vm._s(_vm.notActiveText) + "\n            ")]) : _vm._e()] : _vm._e(), _vm._v(" "), (_vm.iconMode) ? [(!_vm.active) ? _c('span', {
    staticClass: "toggle-off toggle-off-icon",
    class: {
      'left-active': !_vm.active
    },
    on: {
      "click": _vm.switchToggle
    }
  }, [_c('svg', {
    class: 'icons' + _vm.iconConf.size + ' ' + (_vm.iconConf.color ? ('icon-' + _vm.iconConf.color) : 'icon-gray') + ' ' + _vm.iconConf.id
  }, [_c('use', {
    attrs: {
      "xlink:href": '#' + _vm.iconConf.id
    }
  })])]) : _c('span', {
    staticClass: "toggle-on toggle-on-icon",
    class: {
      'right-active': _vm.active
    },
    on: {
      "click": _vm.switchToggle
    }
  }, [_c('svg', {
    class: 'icons' + _vm.iconConf.size
  }, [_c('use', {
    attrs: {
      "xlink:href": '#' + _vm.iconConf.id
    }
  })])])] : _vm._e(), _vm._v(" "), _c('div', {
    staticClass: "toggle-button-wrap",
    class: {
      'toggle-button-active': _vm.active, 'toggle-button-not-active': !_vm.active
    },
    on: {
      "click": _vm.switchToggle
    }
  }, [_vm._m(0)]), _vm._v(" "), (!_vm.iconMode) ? [(_vm.activeText) ? _c('span', {
    staticClass: "toggle-on",
    class: {
      'right-active': _vm.active
    },
    on: {
      "click": _vm.switchToggle
    }
  }, [_vm._v("\n                " + _vm._s(_vm.activeText) + "\n            ")]) : _vm._e()] : _vm._e()], 2)])
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "toggle-button-bg"
  }, [_c('div', {
    staticClass: "toggle-button-out"
  }), _vm._v(" "), _c('div', {
    staticClass: "toggle-button-in"
  }), _vm._v(" "), _c('div', {
    staticClass: "toggle-button-switch"
  })])
}]}

/***/ }),

/***/ 2:
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

/***/ }),

/***/ 53:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(6);


/***/ }),

/***/ 6:
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(9),
  /* template */
  __webpack_require__(11),
  /* styles */
  null,
  /* scopeId */
  null,
  /* moduleIdentifier (server only) */
  null
)

module.exports = Component.exports


/***/ }),

/***/ 9:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function($) {

Object.defineProperty(exports, "__esModule", {
    value: true
});

__webpack_require__(1);

__webpack_require__(10);

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

var Toggle = {
    props: {
        customClass: {
            type: [String],
            default: ''
        },

        // if locked is true, can't change active status
        locked: {
            type: [Boolean],
            default: false
        },
        /**
         * active status, true or false
         */
        isActiveAtInit: {
            type: [Boolean],
            default: false
        },

        /**
         * active color class, the predefined values are "red", "green", "blue"
         * the class active-color-is-colorname will be added on .toggle-wrapper element
         */
        activeColor: {
            type: String,
            default: 'green'
        },

        /**
         * not-active color class, the predefined values are "red", "green", "blue"
         * the class not-active-color-is-colorname will be added on .toggle-wrapper element
         */
        notActiveColor: {
            type: String
        },

        /**
         * the callback which will be executed as:
         * function callback(changedActiveStatus, $vm)
         */
        onSwitch: {
            type: Function
        },

        /**
         * The text for not active(left) text
         */
        notActiveText: {
            type: String,
            default: 'OFF'
        },

        /**
         * The text for active(right) text
         */
        activeText: {
            type: String,
            default: 'ON'
        },

        /**
         * when this is passed in, the active/not-active text will be removed
         * the iconConf obj should be like:
         * {
         *   id: 'icon-settings',
         *   size: '18'
         * }
         */
        iconConf: {
            type: Object,
            default: function _default() {
                return {};
            }
        },

        size: {
            type: String,
            default: 'normal' //'normal' or 'small' DEV-29307 UI: Toggle styling fixes
        }
    },
    computed: {
        colorClass: function colorClass() {
            var colorClassObj = {};
            colorClassObj['active-color-is-' + this.activeColor] = this.activeColor;
            colorClassObj['not-active-color-is-' + this.notActiveColor] = this.notActiveColor;
            return colorClassObj;
        },
        iconMode: function iconMode() {
            return !!this.iconConf.id;
        }
    },
    methods: {
        switchToggle: function switchToggle(e) {
            if (this.locked) {
                return;
            }

            //DEV-29307
            //If the toggle has labels on each side (eg. On/Off), clicking the label on either side should move the toggle to that side.
            //If the toggle has only one label (eg. Treat as glob), clicking the label should change the state of the toggle.
            var $el = $(e.currentTarget);
            var ifSingleText = this.activeText && !this.notActiveText || !this.activeText && this.notActiveText;
            if (!ifSingleText && $el.hasClass('toggle-off') && $el.hasClass('left-active')) {
                return;
            }
            if (!ifSingleText && $el.hasClass('toggle-on') && $el.hasClass('right-active')) {
                return;
            }

            this.active = !this.active;
            this.$nextTick(function () {
                if (this.onSwitch) {
                    this.onSwitch(this.active, this);
                }
            });
        }
    },
    data: function data() {
        return {
            active: this.isActiveAtInit
        };
    }
};

exports.default = Toggle;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ })

/******/ });
});
//# sourceMappingURL=Toggle.js.map