(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("jquery"), require("Vue"), require("moment"), require("jqueryui-slider"));
	else if(typeof define === 'function' && define.amd)
		define(["jquery", "Vue", "moment", "jqueryui-slider"], factory);
	else if(typeof exports === 'object')
		exports["TimeRangePicker"] = factory(require("jquery"), require("Vue"), require("moment"), require("jqueryui-slider"));
	else
		root["LMUI"] = root["LMUI"] || {}, root["LMUI"]["TimeRangePicker"] = factory(root["$"], root["Vue"], root["moment"], root["jqueryui-slider"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_43__, __WEBPACK_EXTERNAL_MODULE_44__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 55);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

/* globals __VUE_SSR_CONTEXT__ */

// this module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle

module.exports = function normalizeComponent (
  rawScriptExports,
  compiledTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier /* server only */
) {
  var esModule
  var scriptExports = rawScriptExports = rawScriptExports || {}

  // ES6 modules interop
  var type = typeof rawScriptExports.default
  if (type === 'object' || type === 'function') {
    esModule = rawScriptExports
    scriptExports = rawScriptExports.default
  }

  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (compiledTemplate) {
    options.render = compiledTemplate.render
    options.staticRenderFns = compiledTemplate.staticRenderFns
  }

  // scopedId
  if (scopeId) {
    options._scopeId = scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = injectStyles
  }

  if (hook) {
    var functional = options.functional
    var existing = functional
      ? options.render
      : options.beforeCreate
    if (!functional) {
      // inject component registration as beforeCreate hook
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    } else {
      // register for functioal component in vue file
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return existing(h, context)
      }
    }
  }

  return {
    esModule: esModule,
    exports: scriptExports,
    options: options
  }
}


/***/ }),
/* 1 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function($) {

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vue = __webpack_require__(5);

var _vue2 = _interopRequireDefault(_vue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

$.fn.addSVGClass = function (className) {
    var $svg = $(this);
    if ($svg.length > 0) {
        var svgEl = $svg[0];
        if (svgEl.classList) {
            svgEl.classList.add(className);
        } else {
            var className = $svg.attr('class') || '';
            $svg.attr('class', className + ' ' + className);
        }
    }
    return this;
};

$.fn.removeSVGClass = function (className) {
    var $svg = $(this);
    if ($svg.length > 0) {
        var svgEl = $svg[0];
        if (svgEl.classList) {
            svgEl.classList.remove(className);
        } else {
            $svg.attr('class', ($svg.attr('class') || '').replace(className, ' '));
        }
    }
    return this;
};

//https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex
if (!Array.prototype.findIndex) {
    Array.prototype.findIndex = function (predicate) {
        if (this === null) {
            throw new TypeError('Array.prototype.findIndex called on null or undefined');
        }
        if (typeof predicate !== 'function') {
            throw new TypeError('predicate must be a function');
        }
        var list = Object(this);
        var length = list.length >>> 0;
        var thisArg = arguments[1];
        var value;

        for (var i = 0; i < length; i++) {
            value = list[i];
            if (predicate.call(thisArg, value, i, list)) {
                return i;
            }
        }
        return -1;
    };
}

//https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/find
if (!Array.prototype.find) {
    Object.defineProperty(Array.prototype, 'find', {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function value(predicate) {
            if (this == null) {
                throw new TypeError('Array.prototype.find called on null or undefined');
            }
            if (typeof predicate !== 'function') {
                throw new TypeError('predicate must be a function');
            }
            var list = Object(this);
            var length = list.length >>> 0;
            var thisArg = arguments[1];
            var value;

            for (var i = 0; i < length; i++) {
                if (i in list) {
                    value = list[i];
                    if (predicate.call(thisArg, value, i, list)) {
                        return value;
                    }
                }
            }
            return undefined;
        }
    });
}

var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
};

var createEscaper = function createEscaper(map) {
    var escaper = function escaper(match) {
        return map[match];
    };

    var source = '(?:' + Object.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function (string) {
        string = string == null ? '' : '' + string;
        return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
};

var utils = {
    escape: createEscaper(escapeMap),

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     **/
    escapeRegExp: function escapeRegExp(str) {
        var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
        var reHasRegExpChar = RegExp(reRegExpChar.source);
        return str && reHasRegExpChar.test(str) ? str.replace(reRegExpChar, '\\$&') : str;
    },

    parseJSON: function parseJSON(objOrStr) {
        var ret;

        if (_vue2.default.util.isObject(objOrStr)) {
            ret = objOrStr;
        } else {
            try {
                ret = JSON.parse(String(objOrStr));
            } catch (e) {
                ret = {};
            }
        }

        return ret;
    },

    debounce: function debounce(func, wait, immediate) {
        var timeout, args, context, timestamp, result;

        var later = function later() {
            var last = new Date().getTime() - timestamp;

            if (last < wait && last >= 0) {
                timeout = setTimeout(later, wait - last);
            } else {
                timeout = null;
                if (!immediate) {
                    result = func.apply(context, args);
                    if (!timeout) context = args = null;
                }
            }
        };

        return function () {
            context = this;
            args = arguments;
            timestamp = new Date().getTime();
            var callNow = immediate && !timeout;
            if (!timeout) timeout = setTimeout(later, wait);
            if (callNow) {
                result = func.apply(context, args);
                context = args = null;
            }

            return result;
        };
    }

};

exports.default = utils;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(12),
  /* template */
  __webpack_require__(14),
  /* styles */
  null,
  /* scopeId */
  null,
  /* moduleIdentifier (server only) */
  null
)

module.exports = Component.exports


/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_5__;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(9),
  /* template */
  __webpack_require__(11),
  /* styles */
  null,
  /* scopeId */
  null,
  /* moduleIdentifier (server only) */
  null
)

module.exports = Component.exports


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var iconPropConfig = {
  type: [Object, String]
};

var propThemeConfig = {
  type: [String],
  default: 'gray',
  validator: function validator(value) {
    return ['blue', 'gray', 'white'].indexOf(value) > -1;
  }
};

exports.default = {
  /**
   * define the button type the type can be plain, icon, split, menu and toggle buttons
   */
  type: {
    type: [String],
    default: 'plain',
    validator: function validator(value) {
      return ['plain', 'icon', 'split', 'menu', 'toggle'].indexOf(value) > -1;
    }
  },
  /**
   * define button size, the type can be empty, small, small-small
   */
  size: {
    type: [String],
    default: ''
  },
  /**
   * define the theme of the button, the theme can be gray, blue and white
   */
  theme: propThemeConfig,
  isAnimate: {
    type: [Boolean],
    default: true
  },
  isDisabled: {
    type: [Boolean],
    default: false
  },
  /**
   * Specify the icon of the button
   * example:
   * icon="icon-settings"
   * icon="{size: 26, theme: 'gray', id: 'icon-lookup-26'}"
   */
  icon: {
    type: [Object, String]
  },
  /**
   * iconPosition means the position of the icon relative to the button text
   * example:
   * icon-position="left"
   * icon-position="right"
   */
  iconPosition: {
    type: [String]
  },
  /**
   * Define the button text
   */
  text: {
    type: [String]
  },
  /**
   * Specify the split icon for the split buttons, the config style is the same with the icon
   */
  splitIcon: {
    type: [Object, String]
  },
  /**
   * Specify the button text of the split button
   */
  splitBtnText: {
    type: [String]
  },
  /**
   * Specify the theme of the split button
   */
  splitBtnTheme: {
    type: [String],
    validator: function validator(value) {
      return ['blue', 'gray', 'white'].indexOf(value) > -1;
    }
  },
  /**
   * Specify the icon of the toggle button in active status
   */
  activeIcon: {
    type: [Object, String]
  },
  /**
   * Specify the text of the toggle button in active status
   */
  activeText: {
    type: [String]
  },
  isActiveAtInit: {
    type: [Boolean],
    default: false
  },
  style: {
    type: [String],
    default: ''
  }
};

/***/ }),
/* 8 */,
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function($) {

Object.defineProperty(exports, "__esModule", {
    value: true
});

__webpack_require__(1);

__webpack_require__(10);

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

var Toggle = {
    props: {
        customClass: {
            type: [String],
            default: ''
        },

        // if locked is true, can't change active status
        locked: {
            type: [Boolean],
            default: false
        },
        /**
         * active status, true or false
         */
        isActiveAtInit: {
            type: [Boolean],
            default: false
        },

        /**
         * active color class, the predefined values are "red", "green", "blue"
         * the class active-color-is-colorname will be added on .toggle-wrapper element
         */
        activeColor: {
            type: String,
            default: 'green'
        },

        /**
         * not-active color class, the predefined values are "red", "green", "blue"
         * the class not-active-color-is-colorname will be added on .toggle-wrapper element
         */
        notActiveColor: {
            type: String
        },

        /**
         * the callback which will be executed as:
         * function callback(changedActiveStatus, $vm)
         */
        onSwitch: {
            type: Function
        },

        /**
         * The text for not active(left) text
         */
        notActiveText: {
            type: String,
            default: 'OFF'
        },

        /**
         * The text for active(right) text
         */
        activeText: {
            type: String,
            default: 'ON'
        },

        /**
         * when this is passed in, the active/not-active text will be removed
         * the iconConf obj should be like:
         * {
         *   id: 'icon-settings',
         *   size: '18'
         * }
         */
        iconConf: {
            type: Object,
            default: function _default() {
                return {};
            }
        },

        size: {
            type: String,
            default: 'normal' //'normal' or 'small' DEV-29307 UI: Toggle styling fixes
        }
    },
    computed: {
        colorClass: function colorClass() {
            var colorClassObj = {};
            colorClassObj['active-color-is-' + this.activeColor] = this.activeColor;
            colorClassObj['not-active-color-is-' + this.notActiveColor] = this.notActiveColor;
            return colorClassObj;
        },
        iconMode: function iconMode() {
            return !!this.iconConf.id;
        }
    },
    methods: {
        switchToggle: function switchToggle(e) {
            if (this.locked) {
                return;
            }

            //DEV-29307
            //If the toggle has labels on each side (eg. On/Off), clicking the label on either side should move the toggle to that side.
            //If the toggle has only one label (eg. Treat as glob), clicking the label should change the state of the toggle.
            var $el = $(e.currentTarget);
            var ifSingleText = this.activeText && !this.notActiveText || !this.activeText && this.notActiveText;
            if (!ifSingleText && $el.hasClass('toggle-off') && $el.hasClass('left-active')) {
                return;
            }
            if (!ifSingleText && $el.hasClass('toggle-on') && $el.hasClass('right-active')) {
                return;
            }

            this.active = !this.active;
            this.$nextTick(function () {
                if (this.onSwitch) {
                    this.onSwitch(this.active, this);
                }
            });
        }
    },
    data: function data() {
        return {
            active: this.isActiveAtInit
        };
    }
};

exports.default = Toggle;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 10 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 11 */
/***/ (function(module, exports) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "lmui-toggle",
    class: [_vm.customClass, _vm.size]
  }, [_c('div', {
    staticClass: "toggle-wrapper toggle-button clearfix",
    class: [_vm.colorClass, {
      locked: _vm.locked
    }]
  }, [(!_vm.iconMode) ? [(_vm.notActiveText) ? _c('span', {
    staticClass: "toggle-off",
    class: {
      'left-active': !_vm.active
    },
    on: {
      "click": _vm.switchToggle
    }
  }, [_vm._v("\n                " + _vm._s(_vm.notActiveText) + "\n            ")]) : _vm._e()] : _vm._e(), _vm._v(" "), (_vm.iconMode) ? [(!_vm.active) ? _c('span', {
    staticClass: "toggle-off toggle-off-icon",
    class: {
      'left-active': !_vm.active
    },
    on: {
      "click": _vm.switchToggle
    }
  }, [_c('svg', {
    class: 'icons' + _vm.iconConf.size + ' ' + (_vm.iconConf.color ? ('icon-' + _vm.iconConf.color) : 'icon-gray') + ' ' + _vm.iconConf.id
  }, [_c('use', {
    attrs: {
      "xlink:href": '#' + _vm.iconConf.id
    }
  })])]) : _c('span', {
    staticClass: "toggle-on toggle-on-icon",
    class: {
      'right-active': _vm.active
    },
    on: {
      "click": _vm.switchToggle
    }
  }, [_c('svg', {
    class: 'icons' + _vm.iconConf.size
  }, [_c('use', {
    attrs: {
      "xlink:href": '#' + _vm.iconConf.id
    }
  })])])] : _vm._e(), _vm._v(" "), _c('div', {
    staticClass: "toggle-button-wrap",
    class: {
      'toggle-button-active': _vm.active, 'toggle-button-not-active': !_vm.active
    },
    on: {
      "click": _vm.switchToggle
    }
  }, [_vm._m(0)]), _vm._v(" "), (!_vm.iconMode) ? [(_vm.activeText) ? _c('span', {
    staticClass: "toggle-on",
    class: {
      'right-active': _vm.active
    },
    on: {
      "click": _vm.switchToggle
    }
  }, [_vm._v("\n                " + _vm._s(_vm.activeText) + "\n            ")]) : _vm._e()] : _vm._e()], 2)])
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "toggle-button-bg"
  }, [_c('div', {
    staticClass: "toggle-button-out"
  }), _vm._v(" "), _c('div', {
    staticClass: "toggle-button-in"
  }), _vm._v(" "), _c('div', {
    staticClass: "toggle-button-switch"
  })])
}]}

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

__webpack_require__(1);

__webpack_require__(13);

var _buttonProps = __webpack_require__(7);

var _buttonProps2 = _interopRequireDefault(_buttonProps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    props: _buttonProps2.default,
    data: function data() {
        return {
            isActive: this.isActiveAtInit
        };
    },

    computed: {
        isIconPassed: function isIconPassed() {
            return !!(this.realIcon && this.realIcon.id);
        },
        isTextPassed: function isTextPassed() {
            return this.realText != undefined;
        },
        realIcon: function realIcon() {
            if (this.type == 'toggle' && this.isActive) {
                return this.normalizedActiveIcon;
            } else {
                return this.normalizedIcon;
            }
        },
        realText: function realText() {
            if (this.type == 'toggle' && this.isActive) {
                return this.activeText;
            } else {
                return this.text;
            }
        },
        normalizedIcon: function normalizedIcon() {
            var icon = this._getNormalizedIcon(this.icon);
            var retIcon;

            if (icon) {
                retIcon = {};
                Object.assign(retIcon, icon);

                if (!icon.theme && this.theme == 'blue') {
                    retIcon.theme = 'white';
                }

                retIcon.theme = this.transformIconColor(retIcon.theme);
            }

            return retIcon;
        },
        normalizedSplitIcon: function normalizedSplitIcon() {
            var icon = this._getNormalizedIcon(this.splitIcon);
            var retIcon;

            if (icon) {
                retIcon = {};
                Object.assign(retIcon, icon);

                if (!icon.theme && this.normalizedIcon && this.normalizedIcon.theme) {
                    retIcon.theme = this.normalizedIcon.theme;
                }

                retIcon.theme = this.transformIconColor(retIcon.theme);
            }

            return retIcon;
        },
        normalizedActiveIcon: function normalizedActiveIcon() {
            var icon = this._getNormalizedIcon(this.activeIcon);
            var retIcon;

            if (icon) {
                retIcon = {};
                Object.assign(retIcon, icon);

                retIcon.theme = this.transformIconColor(retIcon.theme, 'white');
            }

            return retIcon;
        },
        normalizedIconPosition: function normalizedIconPosition() {
            var defaultIconPosition = this.type == 'menu' ? 'right' : 'left';
            return this.iconPosition || defaultIconPosition;
        },
        normalizedSplitBtnTheme: function normalizedSplitBtnTheme() {
            return this.splitBtnTheme || this.theme;
        }
    },

    methods: {
        transformIconColor: function transformIconColor(color) {
            var defaultColor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'gray';

            var colorMap = {
                blue: 'primary1',
                lightGray: 'light-gray'
            };

            return colorMap[color] || color || defaultColor;
        },
        onClickButton: function onClickButton(e) {
            var me = this;
            this.isActive = !this.isActive;

            this.$nextTick(function () {
                me.$emit('toggle', me.isActive, this);
            });
        },
        _getNormalizedIcon: function _getNormalizedIcon(icon) {
            if (icon) {
                if (typeof icon == 'string') {
                    icon = {
                        id: icon
                    };
                }

                icon.size = icon.size || 18;
            }

            return icon;
        }
    }
};

// vue loader can't export anything except default

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/***/ }),
/* 13 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 14 */
/***/ (function(module, exports) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    style: ('display:inline-block;' + _vm.style)
  }, [_c('button', {
    class: 'lm-button ' + (_vm.isActive ? 'active ' : ' ') + _vm.type + '-button ' + _vm.theme +
      ' ' + _vm.size + ' ' + (_vm.isAnimate ? 'animate ' : ' ') + (_vm.type == 'split' ? 'split-left ' : ''),
    attrs: {
      "disabled": _vm.isDisabled
    },
    on: {
      "click": _vm.onClickButton
    }
  }, [(_vm.realIcon && _vm.realIcon.id && _vm.normalizedIconPosition == 'left') ? _c('svg', {
    class: 'icons' + _vm.realIcon.size + ' icon-' + _vm.realIcon.theme
  }, [_c('use', {
    attrs: {
      "xlink:href": '#' + _vm.realIcon.id
    }
  })]) : _vm._e(), _vm._v(" "), (!_vm.isIconPassed || !_vm.isTextPassed) ? _vm._t("default") : _vm._e(), _vm._v(" "), (_vm.isTextPassed) ? [_vm._v("\n            " + _vm._s(_vm.realText) + "\n        ")] : _vm._e(), _vm._v(" "), (_vm.realIcon && _vm.realIcon.id && _vm.normalizedIconPosition == 'right') ? _c('svg', {
    class: 'icons' + _vm.realIcon.size + ' icon-' + _vm.realIcon.theme
  }, [_c('use', {
    attrs: {
      "xlink:href": '#' + _vm.realIcon.id
    }
  })]) : _vm._e()], 2), _vm._v(" "), (_vm.type == 'split') ? _c('button', {
    class: 'lm-button split-right ' + _vm.normalizedSplitBtnTheme + ' ' + (_vm.isAnimate ? 'animate' : '')
  }, [(_vm.normalizedSplitIcon && _vm.normalizedSplitIcon.id) ? _c('svg', {
    class: 'icons' + _vm.normalizedSplitIcon.size + ' icon-' + _vm.normalizedSplitIcon.theme
  }, [_c('use', {
    attrs: {
      "xlink:href": '#' + _vm.normalizedSplitIcon.id
    }
  })]) : _vm._e(), _vm._v("\n        " + _vm._s(_vm.splitBtnText) + "\n    ")]) : _vm._e()])
},staticRenderFns: []}

/***/ }),
/* 15 */,
/* 16 */,
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */,
/* 31 */,
/* 32 */,
/* 33 */,
/* 34 */,
/* 35 */,
/* 36 */,
/* 37 */,
/* 38 */,
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(40),
  /* template */
  __webpack_require__(46),
  /* styles */
  null,
  /* scopeId */
  null,
  /* moduleIdentifier (server only) */
  null
)

module.exports = Component.exports


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function($) {

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vue = __webpack_require__(5);

var _vue2 = _interopRequireDefault(_vue);

var _utils = __webpack_require__(3);

var _utils2 = _interopRequireDefault(_utils);

__webpack_require__(1);

__webpack_require__(41);

var _toggle = __webpack_require__(6);

var _toggle2 = _interopRequireDefault(_toggle);

var _Button = __webpack_require__(4);

var _Button2 = _interopRequireDefault(_Button);

__webpack_require__(45);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    components: {
        lmToggle: _toggle2.default,
        lmButton: _Button2.default
    },

    props: {
        initialTimeRange: { //'default' OR  '1day', '3months'... '1 year' OR '[1478858371, 1478858374]'
            type: [String, Array],
            default: 'default'
        },
        utcOffset: {
            //Offset from UTC as +-HH:mm, +-HHmm ("-08:00")
            type: [String],
            default: '+00:00'
        },
        timezoneShortName: { //'PST', 'GMT', etc.
            type: [String],
            default: 'PDT'
        },
        deltaTimestamp: { //delta timestamp between server and client
            type: [Number],
            default: 0
        },
        keepAtItems: { //predefined time range
            type: [Array],
            default: function _default() {
                return [{
                    value: 1,
                    unit: 'day',
                    display: '1 day'
                }, {
                    value: 7,
                    unit: 'day',
                    display: '1 week'
                }, {
                    value: 30,
                    unit: 'day',
                    display: '1 month'
                }, {
                    value: 90,
                    unit: 'day',
                    display: '3 months'
                }, {
                    value: 180,
                    unit: 'day',
                    display: '6 months'
                }, {
                    value: 1,
                    unit: 'year',
                    display: '1 year'
                }];
            }
        },
        onSaveCallback: {
            type: [Function],
            'default': function _default() {
                return $.noop;
            }
        },
        onValidate: {
            type: [Function],
            'default': function _default() {
                return $.noop;
            }
        },
        onToggleDefault: {
            type: [Function],
            'default': function _default() {
                return $.noop;
            }
        }
    },

    computed: {
        startMoment: function startMoment() {
            return moment(this.startDate + ' ' + this.startTime + ' ' + this.utcOffset, 'YYYY.MM.DD HH:mm Z').zone(this.utcOffset);
        },
        endMoment: function endMoment() {
            return moment(this.endDate + ' ' + this.endTime + ' ' + this.utcOffset, 'YYYY.MM.DD HH:mm Z').zone(this.utcOffset);
        },
        endMomentOnlyDate: function endMomentOnlyDate() {
            return moment(this.endDate + ' ' + this.utcOffset, 'YYYY.MM.DD Z').zone(this.utcOffset);
        },
        $startDate: function $startDate() {
            return $(this.$el).find('.start-date');
        },
        $endDate: function $endDate() {
            return $(this.$el).find('.end-date');
        },
        $startTime: function $startTime() {
            return $(this.$el).find('.start-time');
        },
        $endTime: function $endTime() {
            return $(this.$el).find('.end-time');
        },
        isValidated: function isValidated() {
            return this.isToggleToDefault || this.isSliderRendered;
        },
        isShowStartKeepAtTime: function isShowStartKeepAtTime() {
            return this.keepAtInStart && this.keepAtInStart.isKeepTime;
        },
        isShowEndKeepAtTime: function isShowEndKeepAtTime() {
            return this.keepAtInEnd && this.keepAtInEnd.isKeepTime || this.keepAtInEnd === 'now';
        }
    },

    data: function data() {
        return {
            startDate: '', //YYYY.MM.DD
            startTime: '', //HH:mm
            endDate: '', //YYYY.MM.DD
            endTime: '', //HH:mm

            lastValidatedStartDate: '', //YYYY.MM.DD
            lastValidatedStartTime: '', //HH:mm
            lastValidatedEndDate: '', //YYYY.MM.DD
            lastValidatedEndTime: '', //HH:mm

            isToggleToDefault: true,
            ifShowStartDropdown: false,
            ifShowEndDropdown: false,

            isDateLinked: false,
            isTimeLinked: false,
            linkToggleIcon: {
                id: 'icon-link-26',
                size: '18',
                color: 'light-gray'
            },

            minAndMaxValueLimited: null, //the min value and max value of slider e.g. {min: 0, max: 1440}
            keepAtInStart: null, //same format with keepAtItem {value: 1, unit: 'day', display: '1 day'}
            keepAtInEnd: null, //same format with keepAtItem {value: 1, unit: 'day', display: '1 day'},
            //the keepAtInEnd has a special value: 'now'
            timeReg: /^([0-1][0-9]|[2][0-3]):([0-5][0-9])$/, //HH:mm
            dateReg: /^20\d\d\.([0][1-9]|[1][0-2])\.([0][1-9]|[1-2][0-9]|[3][0-1])$/, //YYYY.MM.DD

            isSliderRendered: false //only slider is rendered, we can think of the time range is validated
        };
    },

    //life cycle hook begin
    created: function created() {
        var parsedTimeRange = this.parseTimeRange(this.initialTimeRange);
        this.startDate = parsedTimeRange.startDate;
        this.startTime = parsedTimeRange.startTime;
        this.endDate = parsedTimeRange.endDate;
        this.endTime = parsedTimeRange.endTime;

        this._resizeHanlder = _utils2.default.debounce(this.renderSlider.bind(this), 100);
        $(window).on('resize.timeRangePicker', this._resizeHanlder);
    },
    mounted: function mounted() {
        this._toggleStartMenu = function (e) {
            if (!this.ifShowStartDropdown) {
                return;
            }
            var el = $(e.target).closest('.start-input-and-dropdown');
            if (el.length) {
                return;
            }
            this.ifShowStartDropdown = false;
        }.bind(this);

        this._toggleEndMenu = function (e) {
            if (!this.ifShowEndDropdown) {
                return;
            }
            var el = $(e.target).closest('.end-input-and-dropdown');
            if (el.length) {
                return;
            }
            this.ifShowEndDropdown = false;
        }.bind(this);

        $(document).on('click.timeRangePicker', this._toggleStartMenu).on('click.timeRangePicker', this._toggleEndMenu);

        if (this.initialTimeRange !== 'default') {
            this.$refs.default.active = true;
            this.onSwitchDefaultCustom(true);
        }
    },
    beforeDestroy: function beforeDestroy() {
        $(document).off('click.timeRangePicker', this._toggleStartMenu).off('click.timeRangePicker', this._toggleEndMenu);
        $(window).off('resize.timeRangePicker', this._resizeHanlder);
        delete this._toggleStartMenu;
        delete this._toggleEndMenu;
    },

    //life cycle hook end

    methods: {
        nowMoment: function nowMoment(ifOnlyDate) {
            if (ifOnlyDate) {
                var date = moment(new Date().getTime() - this.deltaTimestamp).zone(this.utcOffset).format('YYYY.MM.DD');
                return moment(date + ' ' + this.utcOffset, 'YYYY.MM.DD Z').zone(this.utcOffset);
            } else {
                return moment(new Date().getTime() - this.deltaTimestamp).zone(this.utcOffset);
            }
        },
        get$focusInput: function get$focusInput() {
            return $(this.$el).find('.input-container .focus');
        },
        isFocusOnDateInput: function isFocusOnDateInput() {
            var $focus = this.get$focusInput();
            return $focus.hasClass('start-date') || $focus.hasClass('end-date');
        },
        isFocusOnTimeInput: function isFocusOnTimeInput() {
            var $focus = this.get$focusInput();
            return $focus.hasClass('start-time') || $focus.hasClass('end-time');
        },


        parseTimeRange: function parseTimeRange(timeRange) {
            var utcOffset = this.utcOffset;

            var endMoment = void 0;
            var startMonent = void 0;
            if (timeRange === 'default') {
                endMoment = this.nowMoment();
                startMonent = moment(endMoment).add(-1, 'days');
            } else if (typeof timeRange === 'string') {
                var predefinedRegMatch = timeRange.match(/^(\d+)(hour|day|week|month|year)/);
                var customRegMatch = timeRange.match(/^(\d\d\d\d-\d\d-\d\d \d\d:\d\d) TO (\d\d\d\d-\d\d-\d\d \d\d:\d\d)$/);

                if (predefinedRegMatch) {
                    endMoment = this.nowMoment();

                    //1hour, 2hour, 5hour, 1day, 2days, 7days, 1month, 3month, 1year
                    var value = predefinedRegMatch[1];
                    var unit = predefinedRegMatch[2];
                    startMonent = moment(endMoment).add(-value, unit + 's');

                    this.keepAtInStart = {
                        value: value,
                        unit: unit,
                        display: timeRange,
                        isKeepTime: true
                    };
                    this.keepAtInEnd = 'now';
                } else if (customRegMatch) {
                    //2016-12-19 07:16 TO 2016-12-20 07:16
                    startMonent = moment(customRegMatch[1] + ' ' + this.utcOffset, 'YYYY.MM.DD HH:mm Z').zone(this.utcOffset);
                    endMoment = moment(customRegMatch[2] + ' ' + this.utcOffset, 'YYYY.MM.DD HH:mm Z').zone(this.utcOffset);
                }
            } else if (Array.isArray(timeRange)) {
                endMoment = moment.unix(timeRange[1]).zone(utcOffset);
                startMonent = moment.unix(timeRange[0]).zone(utcOffset);
            }
            return {
                startDate: startMonent.format('YYYY.MM.DD'),
                startTime: startMonent.format('HH:mm'),
                endDate: endMoment.format('YYYY.MM.DD'),
                endTime: endMoment.format('HH:mm')
            };
        },

        renderSlider: function renderSlider(err) {
            var me = this;
            var $el = $(this.$el);
            var $focus = this.get$focusInput();

            this.isSliderRendered = false;

            //primary validate begin
            if (!this.dateReg.test(this.startDate)) {
                return false;
            }

            if (!this.dateReg.test(this.endDate)) {
                return false;
            }

            if (!this.timeReg.test(this.startTime)) {
                return false;
            }

            if (!this.timeReg.test(this.endTime)) {
                return false;
            }
            //primary validate end

            //intermediate begin
            if (!this.startMoment.isValid()) {
                if (this.$startDate.hasClass('focus')) {
                    this.startDate = this.lastValidatedStartDate;
                    this.onValidate($focus, 'Invalid Date');
                }

                if (this.$startTime.hasClass('focus')) {
                    this.startTime = this.lastValidatedStartTime;
                    this.onValidate($focus, 'Invalid Time');
                }
                return false;
            }

            if (!this.endMoment.isValid()) {
                if (this.$endDate.hasClass('focus')) {
                    this.endDate = this.lastValidatedEndDate;
                    this.onValidate($focus, 'Invalid Date');
                }

                if (this.$endTime.hasClass('focus')) {
                    this.endTime = this.lastValidatedEndTime;
                    this.onValidate($focus, 'Invalid Time');
                }
                return false;
            }
            //intermediate end

            this.updateLinkingInput();

            //advanced validate begin
            var advancedValidationErrMsg = '';
            if (this.endMomentOnlyDate.unix() > this.nowMoment(true).unix()) {
                advancedValidationErrMsg = 'The End date cannot be later than today';
            }

            if (this.nowMoment().diff(this.startMoment, 'days') > 366) {
                advancedValidationErrMsg = 'The From date cannot be before one year ago';
            }

            if (this.startMoment.unix() > this.endMoment.unix()) {
                advancedValidationErrMsg = 'The From date must be before the End date';
            }

            if (advancedValidationErrMsg) {
                //roll back
                this.startDate = this.lastValidatedStartDate;
                this.startTime = this.lastValidatedStartTime;
                this.endDate = this.lastValidatedEndDate;
                this.endTime = this.lastValidatedEndTime;
                this.onValidate($focus, advancedValidationErrMsg);
                return false;
            }
            //advanced validate end

            var startDate = this.startDate;
            var startTime = this.startTime;
            var endDate = this.endDate;
            var endTime = this.endTime;

            var sliderContainer = $(this.$el).find('.lm-time-slider');

            if (sliderContainer.hasClass('ui-slider')) {
                sliderContainer.lmTimeSlider('destroy');
            }
            sliderContainer.empty();

            var startTimestamp = this.getDateUnixTimestamp(startDate);
            var endTimestamp = this.getDateUnixTimestamp(endDate);

            if (typeof err === 'string') {
                sliderContainer.text(err);
                return;
            }

            this.lastValidatedStartDate = startDate;
            this.lastValidatedEndDate = endDate;
            this.lastValidatedStartTime = startTime;
            this.lastValidatedEndTime = endTime;
            this.isSliderRendered = true;

            if ($el.find('.focus').hasClass('start-date') || $el.find('.focus').hasClass('end-date')) {
                var minAndMaxValueLimited = this.getMinAndMaxOfDate(startTimestamp, endTimestamp);

                if (this.minAndMaxValueLimited) {
                    //TODO Temporarily cancel auto raise feature
                    //raise to next level
                    /*                        if(this.minAndMaxValueLimited.max - this.minAndMaxValueLimited.min === 86400 * 30){
                                                if(minAndMaxValueLimited.max - minAndMaxValueLimited.min > 86400 * 30){
                                                    this.minAndMaxValueLimited = minAndMaxValueLimited;
                                                }
                                            }
                                            if(this.minAndMaxValueLimited.max - this.minAndMaxValueLimited.min === 86400 * 90){
                                                if(minAndMaxValueLimited.max - minAndMaxValueLimited.min > 86400 * 90){
                                                    this.minAndMaxValueLimited = minAndMaxValueLimited;
                                                }
                                            }
                                            if(this.minAndMaxValueLimited.max - this.minAndMaxValueLimited.min === 86400 * 180){
                                                if(minAndMaxValueLimited.max - minAndMaxValueLimited.min > 86400 * 180){
                                                    this.minAndMaxValueLimited = minAndMaxValueLimited;
                                                }
                                            }
                    
                                            if(startTimestamp < this.minAndMaxValueLimited.min || endTimestamp > this.minAndMaxValueLimited.max){
                                                this.minAndMaxValueLimited = minAndMaxValueLimited;
                                            }*/
                } else {
                    this.minAndMaxValueLimited = minAndMaxValueLimited;
                }

                sliderContainer.lmTimeSlider({
                    min: this.minAndMaxValueLimited.min,
                    max: this.minAndMaxValueLimited.max,
                    step: 86400,
                    values: [startTimestamp, endTimestamp],
                    type: 'date',
                    focusedIndex: this.focusedIndex,
                    disabled: this.keepAtInStart && this.keepAtInEnd === 'now',
                    isDisabledRightHandle: !this.keepAtInStart && this.keepAtInEnd === 'now',
                    isLinked: this.isDateLinked,
                    startCallback: function startCallback(startValue, endValue, index) {
                        if (index === 0) {
                            me.addFocusStyle($el.find('.start-date'));
                        }
                        if (index === 1) {
                            me.addFocusStyle($el.find('.end-date'));
                        }
                    },
                    stopCallback: function stopCallback(startValue, endValue, index) {
                        me.startDate = me.getDataFormatString(startValue);
                        me.endDate = me.getDataFormatString(endValue);
                        me.renderSlider();
                    }
                });
            } else {

                var startTimeMinutes = this.getTimeMinutes(startTime);
                var endTimeMinutes = this.getTimeMinutes(endTime);
                var min = 0;

                var TOTAL_MINUTES_IN_ONE_DAY = 1440;
                var max = TOTAL_MINUTES_IN_ONE_DAY;

                //over-midnight time case, e.g. 23:00 - 02:00
                if (startTimeMinutes > endTimeMinutes) {
                    endTimeMinutes = endTimeMinutes + TOTAL_MINUTES_IN_ONE_DAY;
                    var idealMin = (TOTAL_MINUTES_IN_ONE_DAY - (endTimeMinutes - startTimeMinutes)) / 2;
                    min = Math.floor(startTimeMinutes / 60) * 60 - Math.floor(idealMin / 60) * 60;
                    max = min + TOTAL_MINUTES_IN_ONE_DAY; //next day 12:00
                }

                $(this.$el).find('.lm-time-slider').lmTimeSlider({
                    min: min,
                    max: max,
                    step: 15,
                    values: [startTimeMinutes, endTimeMinutes],
                    type: 'time',
                    focusedIndex: this.focusedIndex,
                    disabled: this.keepAtInStart && this.keepAtInEnd === 'now',
                    isDisabledRightHandle: !this.keepAtInStart && this.keepAtInEnd === 'now',
                    isLinked: this.isTimeLinked,
                    startCallback: function startCallback(startValue, endValue, index) {
                        if (index === 0) {
                            me.addFocusStyle($el.find('.start-time'));
                        }
                        if (index === 1) {
                            me.addFocusStyle($el.find('.end-time'));
                        }
                    },
                    stopCallback: function stopCallback(startValue, endValue, index) {
                        me.startTime = me.getTimeFormatString(startValue);
                        me.endTime = me.getTimeFormatString(endValue);
                    }
                });
            }
        },
        onInputStartDate: function onInputStartDate(e) {
            this.keepAtInStart = null;
            this.minAndMaxValueLimited = null;
            var $input = $(e.currentTarget);
            var allowChars = /^[\.\d]*$/;
            if (!allowChars.test($input.val())) {
                this.onValidate($input, 'Invalid date format.  Please use YYYY.MM.DD');
                this.startDate = this.lastValidatedStartDate;
            }

            this.renderSlider();
        },
        onInputEndDate: function onInputEndDate(e) {
            this.keepAtInEnd = null;
            this.minAndMaxValueLimited = null;
            var $input = $(e.currentTarget);
            var allowChars = /^[\.\d]*$/;
            if (!allowChars.test($input.val())) {
                this.onValidate($input, 'Invalid date format.  Please use YYYY.MM.DD');
                this.endDate = this.lastValidatedEndDate;
            }

            this.renderSlider();
        },
        onInputStartTime: function onInputStartTime(e) {
            if (this.keepAtInStart && this.keepAtInStart.isKeepTime) {
                this.keepAtInStart.isKeepTime = false;
            }

            var $input = $(e.currentTarget);
            var allowChars = /^[:\d]*$/;
            if (!allowChars.test($input.val())) {
                this.onValidate($input, 'Invalid time format.  Please use HH:mm');
                this.startTime = this.lastValidatedStartTime;
            }

            this.renderSlider();
        },
        onInputEndTime: function onInputEndTime(e) {
            if (this.keepAtInEnd === 'now') {
                this.keepAtInEnd = null;
            }

            if (this.keepAtInEnd && this.keepAtInEnd.isKeepTime) {
                this.keepAtInEnd.isKeepTime = false;
            }

            var $input = $(e.currentTarget);
            var allowChars = /^[:\d]*$/;
            if (!allowChars.test($input.val())) {
                this.onValidate($input, 'Invalid time format.  Please use HH:mm');
                this.endTime = this.lastValidatedEndTime;
            }

            this.renderSlider();
        },
        updateLinkingInput: function updateLinkingInput() {
            var $input = this.get$focusInput();
            if ($input.hasClass('start-date')) {
                if (this.isDateLinked) {
                    var newEndDateValue = this.getDateUnixTimestamp(this.startDate) + this.linkedDateDiff;
                    this.endDate = this.getDataFormatString(newEndDateValue);
                }
            }

            if ($input.hasClass('end-date')) {
                if (this.isDateLinked) {
                    var newStartDateValue = this.getDateUnixTimestamp(this.endDate) - this.linkedDateDiff;
                    this.startDate = this.getDataFormatString(newStartDateValue);
                }
            }

            if ($input.hasClass('start-time')) {
                if (this.isTimeLinked) {
                    var newEndTime = this.getTimeMinutes(this.startTime) + this.linkedTimeDiff;
                    this.endTime = this.getTimeFormatString(newEndTime);
                }
            }

            if ($input.hasClass('end-time')) {
                if (this.isTimeLinked) {
                    var newStartTime = this.getTimeMinutes(this.endTime) - this.linkedTimeDiff;
                    this.startTime = this.getTimeFormatString(newStartTime);
                }
            }
        },
        getMinAndMaxOfDate: function getMinAndMaxOfDate(startTimestamp, endTimestamp) {
            var days = (endTimestamp - startTimestamp) / 86400;
            var min = 0;
            var max = 0;
            var nowTimestamp = this.nowMoment(true).unix();
            var lastYearTimestamp = moment.unix(nowTimestamp).add(-1, 'years').unix();

            if (days < 30) {
                var restRange = 30 * 86400 - (endTimestamp - startTimestamp);
                min = startTimestamp - Math.ceil(restRange / 2);
                max = moment.unix(min).add(30, 'days').unix();

                if (max > nowTimestamp) {
                    max = nowTimestamp;
                    min = moment.unix(max).add(-30, 'days').unix();
                } else if (min < lastYearTimestamp) {
                    min = lastYearTimestamp;
                    max = moment.unix(max).add(30, 'days').unix();
                }
            } else if (days < 90) {
                var _restRange = 90 * 86400 - (endTimestamp - startTimestamp);
                min = startTimestamp - Math.ceil(_restRange / 2);
                max = moment.unix(min).add(90, 'days').unix();

                if (max > nowTimestamp) {
                    max = nowTimestamp;
                    min = moment.unix(max).add(-90, 'days').unix();
                } else if (min < lastYearTimestamp) {
                    min = lastYearTimestamp;
                    max = moment.unix(max).add(90, 'days').unix();
                }
            } else if (days < 180) {
                var _restRange2 = 180 * 86400 - (endTimestamp - startTimestamp);
                min = startTimestamp - Math.ceil(_restRange2 / 2);
                max = moment.unix(min).add(180, 'days').unix();

                if (max > nowTimestamp) {
                    max = nowTimestamp;
                    min = moment.unix(max).add(-180, 'days').unix();
                } else if (min < lastYearTimestamp) {
                    min = lastYearTimestamp;
                    max = moment.unix(max).add(180, 'days').unix();
                }
            } else {
                //let restRange = 365 * 86400 - (endTimestamp - startTimestamp);
                //min = startTimestamp - Math.ceil(restRange / 2);
                //max = moment.unix(min).add(365, 'days').unix();
                max = nowTimestamp;
                min = lastYearTimestamp;
            }

            return { min: min, max: max };
        },
        onFocusStartDate: function onFocusStartDate(e) {
            this.showStartDropDown();
            this.addFocusStyle($(e.currentTarget));
            this.renderSlider();
        },
        onFocusStartTime: function onFocusStartTime(e) {
            this.addFocusStyle($(e.currentTarget));
            this.renderSlider();
        },
        onFocusEndDate: function onFocusEndDate(e) {
            this.showEndDropDown();
            this.addFocusStyle($(e.currentTarget));
            this.renderSlider();
        },
        onFocusEndTime: function onFocusEndTime(e) {
            this.addFocusStyle($(e.currentTarget));
            this.renderSlider();
        },
        addFocusStyle: function addFocusStyle($el) {
            this.focusedIndex = $el.hasClass('start-date') || $el.hasClass('start-time') ? 0 : 1;
            $(this.$el).find('.input-container .focus').removeClass('focus');
            $(this.$el).find('.focused-link').removeSVGClass('focused-link');
            $el.addClass('focus').siblings('.icon-linked').addSVGClass('focused-link');

            this.resetLinkToggleStatus();
        },
        showStartDropDown: function showStartDropDown() {
            this.ifShowStartDropdown = true;

            //the dropdown options should not show options that will make the date early than one year
            var me = this;
            $(this.$el).find('.start-dropdown .dropdown-item').each(function () {
                var $item = $(this);
                var value = Number($item.data('value'));
                var unit = $item.data('unit');
                if (value && unit) {
                    var newMoment = moment(me.endMomentOnlyDate).add(-value, unit + 's');
                    if (newMoment.unix() < me.nowMoment(true).add(-1, 'years').unix()) {
                        $item.hide();
                    } else {
                        $item.show();
                    }
                }
            });
        },
        showEndDropDown: function showEndDropDown() {
            this.ifShowEndDropdown = true;

            //the dropdown options should not show options that will make the date later than today
            var me = this;
            $(this.$el).find('.end-dropdown .dropdown-item').each(function () {
                var $item = $(this);
                var value = Number($item.data('value'));
                var unit = $item.data('unit');
                if (value && unit) {
                    var newMoment = moment(me.startMoment).add(value, unit + 's');
                    if (newMoment.unix() > me.nowMoment().unix()) {
                        $item.hide();
                    } else {
                        $item.show();
                    }
                }
            });
        },
        onSwitchDefaultCustom: function onSwitchDefaultCustom(isActive) {
            this.isToggleToDefault = !isActive;

            if (isActive) {
                var me = this;
                setTimeout(function () {
                    me.addFocusStyle($(me.$el).find('.start-date'));
                    me.renderSlider();
                    me.onToggleDefault(me.isToggleToDefault);
                }, 50);
            }
        },
        onSwitchLink: function onSwitchLink(isActive) {
            if (this.isFocusOnDateInput()) {
                this.isDateLinked = isActive;
                if (!isActive) {
                    this.keepAtInStart = null;
                    this.keepAtInEnd = null;
                }
            }
            if (this.isFocusOnTimeInput()) {
                this.isTimeLinked = isActive;
                if (!isActive) {
                    if (this.keepAtInStart && this.keepAtInStart.isKeepTime) {
                        this.keepAtInStart.isKeepTime = false;
                    }
                    if (this.keepAtInEnd && this.keepAtInEnd.isKeepTime) {
                        this.keepAtInEnd.isKeepTime = false;
                    }
                }
            }

            if (isActive) {
                this.updateTimeDiff();
            }

            this.renderSlider();
        },
        chooseKeepAtInStart: function chooseKeepAtInStart(e) {
            var $el = $(e.currentTarget);
            this.ifShowStartDropdown = false;
            this.minAndMaxValueLimited = null;

            if (this.keepAtInEnd !== 'now') {
                this.keepAtInEnd = null;
            }

            var value = Number($el.data('value'));
            var unit = $el.data('unit');
            this.keepAtInStart = {
                value: value,
                unit: unit,
                display: $el.data('display'),
                isKeepTime: true
            };

            var newMoment = moment(this.endMoment).add(-value, unit + 's');
            this.startDate = newMoment.format('YYYY.MM.DD');
            this.startTime = newMoment.format('HH:mm');

            this.isDateLinked = true;
            this.isTimeLinked = true;
            this.resetLinkToggleStatus();

            this.updateTimeDiff();
            this.renderSlider();
        },
        chooseKeepAtInEnd: function chooseKeepAtInEnd(e) {
            var $el = $(e.currentTarget);
            this.keepAtInStart = null;
            this.ifShowEndDropdown = false;
            this.minAndMaxValueLimited = null;

            var value = Number($el.data('value'));
            var unit = $el.data('unit');
            this.keepAtInEnd = {
                value: value,
                unit: unit,
                display: $el.data('display'),
                isKeepTime: true
            };

            var newMoment = moment(this.startMoment).add(value, unit + 's');
            this.endDate = newMoment.format('YYYY.MM.DD');
            this.endTime = newMoment.format('HH:mm');

            this.isDateLinked = true;
            this.isTimeLinked = true;
            this.resetLinkToggleStatus();

            this.updateTimeDiff();
            this.renderSlider();
        },
        chooseNowInEnd: function chooseNowInEnd() {
            this.ifShowEndDropdown = false;
            this.keepAtInEnd = 'now';
            this.minAndMaxValueLimited = null;
            var momentNow = moment().zone(this.utcOffset);
            this.endDate = momentNow.format('YYYY.MM.DD');
            this.endTime = momentNow.format('HH:mm');

            this.isDateLinked = false;
            this.isTimeLinked = false;
            this.resetLinkToggleStatus();

            this.renderSlider();
        },
        cancelStartKeepAt: function cancelStartKeepAt() {
            this.keepAtInStart = null;
            this.isDateLinked = false;
            this.isTimeLinked = false;
            this.resetLinkToggleStatus();
            this.renderSlider();
        },
        cancelStartKeepAtOnlyTime: function cancelStartKeepAtOnlyTime() {
            this.keepAtInStart.isKeepTime = false;
            this.isTimeLinked = false;

            this.resetLinkToggleStatus();
            this.renderSlider();
        },
        cancelEndKeepAt: function cancelEndKeepAt() {
            this.keepAtInEnd = null;
            this.isDateLinked = false;
            this.isTimeLinked = false;
            this.resetLinkToggleStatus();
            this.renderSlider();
        },
        cancelEndKeepAtOnlyTime: function cancelEndKeepAtOnlyTime() {
            if (this.keepAtInEnd === 'now') {
                this.keepAtInEnd = null;
                this.isDateLinked = false;
                this.isTimeLinked = false;
            } else {
                this.keepAtInEnd.isKeepTime = false;
                this.isTimeLinked = false;
            }

            this.resetLinkToggleStatus();
            this.renderSlider();
        },
        resetLinkToggleStatus: function resetLinkToggleStatus() {
            if (this.isFocusOnDateInput()) {
                this.$refs.link.active = this.isDateLinked;
            }
            if (this.isFocusOnTimeInput()) {
                this.$refs.link.active = this.isTimeLinked;
            }
        },


        //time format HH:mm
        getTimeMinutes: function getTimeMinutes(timeFormatString) {
            if (!this.timeReg.test(timeFormatString)) {
                return 0;
            }
            return Number(timeFormatString.split(':')[0]) * 60 + Number(timeFormatString.split(':')[1]);
        },
        getTimeFormatString: function getTimeFormatString(timeMinutes) {
            //over-midnight time case, e.g. 23:00 - 02:00
            if (timeMinutes >= 1440) {
                timeMinutes = timeMinutes - 1440;
            }

            return String(Math.floor(timeMinutes / 60)).padStart(2, '0') + ':' + String(timeMinutes % 60).padStart(2, '0');
        },


        //date format YYYY.MM.DD
        getDateUnixTimestamp: function getDateUnixTimestamp(dateFormatString) {
            if (!this.dateReg.test(dateFormatString)) {
                return 0;
            }
            return moment(dateFormatString + ' ' + this.utcOffset, 'YYYY.MM.DD Z').unix();
        },
        getDataFormatString: function getDataFormatString(unixTimestamp) {
            return moment.unix(unixTimestamp).zone(this.utcOffset).format('YYYY.MM.DD');
        },
        updateTimeDiff: function updateTimeDiff() {
            this.linkedDateDiff = this.getDateUnixTimestamp(this.endDate) - this.getDateUnixTimestamp(this.startDate);
            this.linkedTimeDiff = this.getTimeMinutes(this.endTime) - this.getTimeMinutes(this.startTime);
        },


        //blue feature begin
        onBlurDate: function onBlurDate(e) {
            var $el = $(e.currentTarget);
            var value = $el.val().trim().split('.');
            var is0To9 = /^[0-9]$/;
            var is1To9 = /^[1-9]$/;

            //MM|M:DD|D
            if (value.length === 2) {
                var year = this.nowMoment().year();
                var month = value[0];
                var day = value[1];
                if (is1To9.test(month)) {
                    month = '0' + month;
                }
                if (is0To9.test(day)) {
                    day = '0' + day;
                }
                if ($el.hasClass('start-date')) {
                    this.startDate = [year, month, day].join('.');
                } else {
                    this.endDate = [year, month, day].join('.');
                }
            }

            //YY:MM|M:DD|D
            if (value.length === 3) {
                var _year = value[0];
                var _month = value[1];
                var _day = value[2];

                if (/^\d\d$/.test(_year)) {
                    _year = '20' + _year;
                }
                if (is1To9.test(_month)) {
                    _month = '0' + _month;
                }
                if (is0To9.test(_day)) {
                    _day = '0' + _day;
                }
                if ($el.hasClass('start-date')) {
                    this.startDate = [_year, _month, _day].join('.');
                } else {
                    this.endDate = [_year, _month, _day].join('.');
                }
            }

            if (!this.dateReg.test(this.startDate)) {
                this.startDate = this.lastValidatedStartDate;
                this.onValidate(this.$startDate, 'Invalid date format');
            }
            if (!this.dateReg.test(this.endDate)) {
                this.endDate = this.lastValidatedEndDate;
                this.onValidate(this.$endDate, 'Invalid date format');
            }

            this.renderSlider();
        },
        onBlurTime: function onBlurTime(e) {
            var $el = $(e.currentTarget);
            var shortTimeReg = /^([0-1][0-9]|[2][0-3]|[0-9]):([0-5][0-9]|[0-9])$/; //HH:mm, H:mm, HH,m, H:m

            if ($el.hasClass('start-time')) {
                if (shortTimeReg.test(this.startTime)) {
                    var spiltTime = this.startTime.split(':');
                    this.startTime = spiltTime[0].padStart(2, '0') + ':' + spiltTime[1].padStart(2, '0');
                }
            } else {
                //end time
                if (shortTimeReg.test(this.endTime)) {
                    var _spiltTime = this.endTime.split(':');
                    this.endTime = _spiltTime[0].padStart(2, '0') + ':' + _spiltTime[1].padStart(2, '0');
                }
            }

            if (!this.timeReg.test(this.startTime)) {
                this.onValidate(this.$startTime, 'Invalid time format');
                this.startTime = this.lastValidatedStartTime;
            }

            if (!this.timeReg.test(this.endTime)) {
                this.onValidate(this.$endTime, 'Invalid time format');
                this.endTime = this.lastValidatedEndTime;
            }

            this.renderSlider();
        },

        //blur feature end

        onSave: function onSave() {
            var outputTimeRange = '';
            if (this.isToggleToDefault) {
                outputTimeRange = 'default';
            } else {
                if (this.keepAtInStart && this.keepAtInEnd === 'now') {
                    outputTimeRange = this.keepAtInStart.value + this.keepAtInStart.unit;
                } else {
                    if (this.keepAtInEnd === 'now') {
                        outputTimeRange = this.startDate + ' ' + this.startTime + ' TO now';
                    } else {
                        outputTimeRange = this.startDate + ' ' + this.startTime + ' TO ' + this.endDate + ' ' + this.endTime;
                    }
                }
            }

            this.onSaveCallback(outputTimeRange);
        }
    }
}; //
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function($) {

Object.defineProperty(exports, "__esModule", {
    value: true
});

__webpack_require__(1);

__webpack_require__(42);

var _moment = __webpack_require__(43);

var _moment2 = _interopRequireDefault(_moment);

__webpack_require__(44);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

$.widget("custom.lmTimeSlider", $.ui.slider, {

    version: "0.1.0",
    options: {
        type: null, // time | date
        isLinked: false,
        range: true,
        animate: 'fast',
        stopCallback: null,
        startCallback: null,
        isDisabledRightHandle: false,
        focusedIndex: 0
    },

    _create: function _create() {
        //middle line
        this.element.append('<div class="middle-line"></div>');

        this._super();
        this._drawLabels();

        if (this.options.isLinked) {
            this._initLink();
        }

        //should after link line inited
        this._updateLabelAlign();
    },
    _start: function _start(event, index) {
        var $handle = this.element.find('.ui-slider-handle.lm-slider-handle');
        $handle.removeClass('focus');
        $handle.eq(index).addClass('focus');

        if (this.options.startCallback) {
            this.options.startCallback(this.values(0), this.values(1), index);
        }
        this._super(event, index);
    },
    _stop: function _stop(event, index) {
        if (index === 1 && this.options.isDisabledRightHandle) {
            return false;
        }

        if (this.options.stopCallback) {
            this.options.stopCallback(this.values(0), this.values(1), index);
        }
        this._super(event, index);
    },
    _slide: function _slide(event, index, newVal) {
        if (index === 1 && this.options.isDisabledRightHandle) {
            return false;
        }

        if (this.options.isLinked) {
            if (index === 0) {
                //drag start
                if (newVal + this.linkedDiff > this.options.max) {
                    return false;
                }

                this.values(1, newVal + this.linkedDiff);
            } else {
                //drag end

                if (newVal - this.linkedDiff < this.options.min) {
                    return false;
                }

                this.values(0, newVal - this.linkedDiff);
            }
        }
        this._super(event, index, newVal);
    },
    _change: function _change(event, index) {
        var newVal = this.values(index);

        this.element.find('.up-label').eq(index).text(this._getFormat(newVal));

        this._updateLabelAlign();

        this._super(event, index);
    },
    _updateLabelAlign: function _updateLabelAlign() {
        if (this.element.find('.ui-slider-range').width() < 40) {
            this.element.find('.ui-slider-handle').eq(0).find('.up-label').addClass('left-align');
            this.element.find('.ui-slider-handle').eq(1).find('.up-label').addClass('right-align');
            this.element.find('.ui-slider-range > .link-line').addClass('too-narrow');
        } else {
            this.element.find('.ui-slider-handle').eq(0).find('.up-label').removeClass('left-align');
            this.element.find('.ui-slider-handle').eq(1).find('.up-label').removeClass('right-align');
            this.element.find('.ui-slider-range > .link-line').removeClass('too-narrow');
        }
    },
    _createHandles: function _createHandles() {
        var options = this.options;

        //remove existing Handles
        this.element.find(".ui-slider-handle").remove();

        var start = this._getFormat(options.values[0]);
        var end = this._getFormat(options.values[1]);

        var handles = ['<div class=\'ui-slider-handle lm-slider-handle ' + (this.options.focusedIndex === 0 ? 'focus' : '') + '\'>\n                        <div class="handle-border"></div>\n                        <div class="up-label">' + start + '</div>\n                </div>', '<div class=\'ui-slider-handle lm-slider-handle ' + (this.options.focusedIndex === 1 ? 'focus' : '') + '\'>\n                        <div class="handle-border"></div>\n                        <div class="up-label">' + end + '</div>\n                </div>'];

        this.handles = $(handles.join("")).appendTo(this.element);

        this.handle = this.handles.eq(0);

        this.handles.each(function (i) {
            $(this).data("ui-slider-handle-index", i);
        });
    },
    _drawLabels: function _drawLabels() {
        var o = this.options;

        var ticks = this._getTicks();
        var tickLength = ticks.length;

        var width = this.element.width();
        var unitWidth = width / ((o.max - o.min) / o.step);
        var $append = $();
        for (var i = 0; i < tickLength; i++) {
            var isFirst = i === 0;
            var isLast = i === tickLength - 1;
            var tickWidth = void 0;
            if (isLast) {
                tickWidth = (o.max - ticks[i].value) / o.step * unitWidth;
            } else {
                tickWidth = (ticks[i + 1].value - ticks[i].value) / o.step * unitWidth;
            }

            var stopHtml = '<div class="stop ' + (isFirst ? 'first' : '') + ' ' + (isLast ? 'last' : '') + '" style="width: ' + tickWidth + 'px;">';

            stopHtml += '<span class="slider-tick ' + (ticks[i].isMarker ? 'marker-tick' : '') + '"></span>';

            if (isFirst) {
                stopHtml += '<div class="down-left-label">' + this._getFormat(o.min) + '</div>';
            } else if (isLast) {
                stopHtml += '<div class="down-right-label">' + this._getFormat(o.max) + '</div>';
            } else if (ticks[i].isMarker) {
                stopHtml += '<div class="marker-label">' + this._getFormat(ticks[i].value) + '</div>';
            } else {
                stopHtml += '<div class="hover-label">' + this._getFormat(ticks[i].value) + '</div>';
            }

            stopHtml += '</div>';

            $append = $append.add(stopHtml);
        }
        this.element.append($append);

        this.element.find('.slider-tick').hover(function () {
            $(this).addClass('hover').siblings('.hover-label').show();
        }, function () {
            $(this).removeClass('hover').siblings('.hover-label').hide();
        });
    },
    _getFormat: function _getFormat(value) {
        return this.options.type === 'time' ? this._getTimeFormat(value) : this._getDateFormat(value);
    },
    _getTimeFormat: function _getTimeFormat(minutes) {
        //over-midnight time case, e.g. 23:00 - 02:00
        if (minutes >= 1440) {
            minutes = minutes - 1440;
        }

        var hour = parseInt(minutes / 60).toString().padStart(2, '0');
        var minute = String(minutes % 60).padStart(2, '0');
        hour = hour === '24' ? '00' : hour;
        return hour + ':' + minute;
    },
    _getDateFormat: function _getDateFormat(unixTimestamp) {
        return (0, _moment2.default)(unixTimestamp * 1000).format('MM.DD');
    },
    _getTicks: function _getTicks() {
        var o = this.options;
        var ticks = []; //{value: 1480670214, isMarker: false}

        if (o.type === 'time') {
            for (var i = o.min; i < o.max; i += 60) {
                var isMarker = false;

                //over-midnight time case, e.g. 23:00 - 02:00
                if (o.max > 1440) {
                    if (i === 1440) {
                        isMarker = true;
                    }
                } else {
                    if (i === 720) {
                        isMarker = true;
                    }
                }

                ticks.push({
                    value: i,
                    isMarker: isMarker
                });
            }
        } else {
            var days = (o.max - o.min) / 86400;

            if (days < 30) {
                for (var _i = o.min; _i < o.max; _i += 86400) {
                    ticks.push({
                        value: _i,
                        isMarker: _moment2.default.unix(_i).format('DD') === '01'
                    }); //daily
                }
            } else if (days < 90) {
                var k = 0;
                for (var _i2 = o.min; _i2 < o.max; _i2 += 86400) {
                    if (k % 3 === 0) {
                        //every 3 days
                        ticks.push({
                            value: _i2,
                            isMarker: ['01', '02', '03'].includes(_moment2.default.unix(_i2).format('DD'))
                        });
                    }
                    k++;
                }
            } else if (days < 180) {
                var _k = 0;
                for (var _i3 = o.min; _i3 < o.max; _i3 += 86400) {
                    if (_k % 7 === 0) {
                        //weekly
                        ticks.push({
                            value: _i3,
                            isMarker: ['01', '02', '03', '04', '05', '06', '07'].includes(_moment2.default.unix(_i3).format('DD'))
                        });
                    }
                    _k++;
                }
            } else {
                for (var _i4 = o.min; _i4 < o.max; _i4 += 86400) {
                    //The 1st and 15th of each month
                    if (_i4 === o.min || ['01', '15'].includes(_moment2.default.unix(_i4).format('DD'))) {
                        ticks.push({
                            value: _i4,
                            isMarker: _moment2.default.unix(_i4).format('DD') === '01'
                        });
                    }
                }
            }
        }
        return ticks;
    },
    _initLink: function _initLink() {
        var o = this.options;
        this.linkedDiff = o.values[1] - o.values[0];
        this.element.find('.ui-slider-range').append('<div class="link-line"></div>');
    }
});

exports.default = {};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 42 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 43 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_43__;

/***/ }),
/* 44 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_44__;

/***/ }),
/* 45 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 46 */
/***/ (function(module, exports) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "lmui-timerange-picker"
  }, [_c('lm-toggle', {
    ref: "default",
    attrs: {
      "not-active-text": "Use Default",
      "active-text": "Custom",
      "active-color": "blue",
      "not-active-color": "green",
      "on-switch": _vm.onSwitchDefaultCustom
    }
  }), _vm._v(" "), _c('div', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (!_vm.isToggleToDefault),
      expression: "!isToggleToDefault"
    }],
    staticClass: "input-container"
  }, [_c('span', {
    staticClass: "start-label"
  }, [_vm._v("From")]), _vm._v(" "), _c('div', {
    staticClass: "start-input-and-dropdown"
  }, [_c('svg', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.isDateLinked),
      expression: "isDateLinked"
    }],
    staticClass: "icons18 icon-light-gray icon-linked"
  }, [_c('use', {
    attrs: {
      "xlink:href": "#icon-linked"
    }
  })]), _vm._v(" "), _c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.startDate),
      expression: "startDate"
    }],
    staticClass: "start-date",
    staticStyle: {
      "padding-left": "10px"
    },
    attrs: {
      "type": "text",
      "placeholder": "YYYY.MM.DD"
    },
    domProps: {
      "value": (_vm.startDate)
    },
    on: {
      "focus": _vm.onFocusStartDate,
      "keyup": _vm.onInputStartDate,
      "blur": _vm.onBlurDate,
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.startDate = $event.target.value
      }
    }
  }), _vm._v(" "), _c('svg', {
    staticClass: "icons18 icon-gray icon-down",
    on: {
      "click": _vm.showStartDropDown
    }
  }, [_c('use', {
    attrs: {
      "xlink:href": "#icon-down"
    }
  })]), _vm._v(" "), _c('div', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.ifShowStartDropdown),
      expression: "ifShowStartDropdown"
    }],
    staticClass: "dropdown-menu start-dropdown"
  }, [_vm._l((_vm.keepAtItems), function(keepAtItem) {
    return _c('div', {
      staticClass: "dropdown-item",
      attrs: {
        "data-value": keepAtItem.value,
        "data-unit": keepAtItem.unit,
        "data-display": keepAtItem.display
      },
      on: {
        "click": function($event) {
          $event.stopPropagation();
          _vm.chooseKeepAtInStart($event)
        }
      }
    }, [_vm._v("\n                    " + _vm._s(keepAtItem.display) + "\n                ")])
  }), _vm._v(" "), _c('div', {
    staticClass: "dropdown-tip"
  }, [_vm._v("... before \"To\" date")])], 2), _vm._v(" "), _c('div', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.keepAtInStart),
      expression: "keepAtInStart"
    }],
    staticClass: "keep-at"
  }, [_vm._v("Keep at " + _vm._s(_vm.keepAtInStart && _vm.keepAtInStart.display) + "\n                "), _c('svg', {
    staticClass: "icons15 icon-gray icon-cancel",
    on: {
      "click": _vm.cancelStartKeepAt
    }
  }, [_c('use', {
    attrs: {
      "xlink:href": "#icon-cancel"
    }
  })])]), _vm._v(" "), _c('span', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.isShowStartKeepAtTime),
      expression: "isShowStartKeepAtTime"
    }],
    staticClass: "keep-link-line"
  })]), _vm._v(" "), _c('div', {
    staticClass: "time-input-wrapper"
  }, [_c('svg', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.isTimeLinked),
      expression: "isTimeLinked"
    }],
    staticClass: "icons18 icon-light-gray icon-linked"
  }, [_c('use', {
    attrs: {
      "xlink:href": "#icon-linked"
    }
  })]), _vm._v(" "), _c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.startTime),
      expression: "startTime"
    }],
    staticClass: "start-time",
    staticStyle: {
      "padding-left": "10px"
    },
    attrs: {
      "type": "text",
      "placeholder": "HH:MM"
    },
    domProps: {
      "value": (_vm.startTime)
    },
    on: {
      "focus": _vm.onFocusStartTime,
      "keyup": _vm.onInputStartTime,
      "blur": _vm.onBlurTime,
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.startTime = $event.target.value
      }
    }
  }), _vm._v(" "), _c('div', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.isShowStartKeepAtTime),
      expression: "isShowStartKeepAtTime"
    }],
    staticClass: "keep-at"
  }, [_c('svg', {
    staticClass: "icons15 icon-gray icon-cancel",
    on: {
      "click": _vm.cancelStartKeepAtOnlyTime
    }
  }, [_c('use', {
    attrs: {
      "xlink:href": "#icon-cancel"
    }
  })])])]), _vm._v(" "), _c('span', {
    staticClass: "start-zone"
  }, [_vm._v(_vm._s(_vm.timezoneShortName))]), _vm._v(" "), _c('span', {
    staticClass: "end-label",
    staticStyle: {
      "margin-left": "20px"
    }
  }, [_vm._v("To")]), _vm._v(" "), _c('div', {
    staticClass: "end-input-and-dropdown"
  }, [_c('svg', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.isDateLinked),
      expression: "isDateLinked"
    }],
    staticClass: "icons18 icon-light-gray icon-linked"
  }, [_c('use', {
    attrs: {
      "xlink:href": "#icon-linked"
    }
  })]), _vm._v(" "), _c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.endDate),
      expression: "endDate"
    }],
    staticClass: "end-date",
    staticStyle: {
      "padding-left": "10px"
    },
    attrs: {
      "type": "text",
      "placeholder": "YYYY.MM.DD"
    },
    domProps: {
      "value": (_vm.endDate)
    },
    on: {
      "focus": _vm.onFocusEndDate,
      "keyup": _vm.onInputEndDate,
      "blur": _vm.onBlurDate,
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.endDate = $event.target.value
      }
    }
  }), _vm._v(" "), _c('svg', {
    staticClass: "icons18 icon-gray icon-down",
    on: {
      "click": _vm.showEndDropDown
    }
  }, [_c('use', {
    attrs: {
      "xlink:href": "#icon-down"
    }
  })]), _vm._v(" "), _c('div', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.ifShowEndDropdown),
      expression: "ifShowEndDropdown"
    }],
    staticClass: "dropdown-menu end-dropdown"
  }, [_c('div', {
    staticClass: "dropdown-item",
    staticStyle: {
      "font-weight": "700"
    },
    on: {
      "click": function($event) {
        $event.stopPropagation();
        _vm.chooseNowInEnd($event)
      }
    }
  }, [_vm._v("Now")]), _vm._v(" "), _c('div', {
    staticClass: "dropdown-separation"
  }), _vm._v(" "), _vm._l((_vm.keepAtItems), function(keepAtItem) {
    return _c('div', {
      staticClass: "dropdown-item",
      attrs: {
        "data-value": keepAtItem.value,
        "data-unit": keepAtItem.unit,
        "data-display": keepAtItem.display
      },
      on: {
        "click": function($event) {
          $event.stopPropagation();
          _vm.chooseKeepAtInEnd($event)
        }
      }
    }, [_vm._v("\n                    " + _vm._s(keepAtItem.display) + "\n                ")])
  }), _vm._v(" "), _c('div', {
    staticClass: "dropdown-tip"
  }, [_vm._v("... after \"From\" date")])], 2), _vm._v(" "), _c('div', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.keepAtInEnd),
      expression: "keepAtInEnd"
    }],
    staticClass: "keep-at"
  }, [_vm._v("Keep at " + _vm._s(_vm.keepAtInEnd ? (_vm.keepAtInEnd.display || _vm.keepAtInEnd) : '') + "\n                "), _c('svg', {
    staticClass: "icons15 icon-gray icon-cancel",
    on: {
      "click": _vm.cancelEndKeepAt
    }
  }, [_c('use', {
    attrs: {
      "xlink:href": "#icon-cancel"
    }
  })])]), _vm._v(" "), _c('span', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.isShowEndKeepAtTime),
      expression: "isShowEndKeepAtTime"
    }],
    staticClass: "keep-link-line"
  })]), _vm._v(" "), _c('div', {
    staticClass: "time-input-wrapper"
  }, [_c('svg', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.isTimeLinked),
      expression: "isTimeLinked"
    }],
    staticClass: "icons18 icon-light-gray icon-linked"
  }, [_c('use', {
    attrs: {
      "xlink:href": "#icon-linked"
    }
  })]), _vm._v(" "), _c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.endTime),
      expression: "endTime"
    }],
    staticClass: "end-time",
    staticStyle: {
      "padding-left": "10px"
    },
    attrs: {
      "type": "text",
      "placeholder": "HH:MM"
    },
    domProps: {
      "value": (_vm.endTime)
    },
    on: {
      "focus": _vm.onFocusEndTime,
      "keyup": _vm.onInputEndTime,
      "blur": _vm.onBlurTime,
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.endTime = $event.target.value
      }
    }
  }), _vm._v(" "), _c('div', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.isShowEndKeepAtTime),
      expression: "isShowEndKeepAtTime"
    }],
    staticClass: "keep-at"
  }, [_c('svg', {
    staticClass: "icons15 icon-gray icon-cancel",
    on: {
      "click": _vm.cancelEndKeepAtOnlyTime
    }
  }, [_c('use', {
    attrs: {
      "xlink:href": "#icon-cancel"
    }
  })])])]), _vm._v(" "), _c('span', {
    staticClass: "end-zone"
  }, [_vm._v(_vm._s(_vm.timezoneShortName))]), _vm._v(" "), _c('lm-toggle', {
    ref: "link",
    attrs: {
      "active-color": "blue",
      "icon-conf": _vm.linkToggleIcon,
      "on-switch": _vm.onSwitchLink,
      "custom-class": "link-toggle"
    }
  })], 1), _vm._v(" "), _c('div', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (!_vm.isToggleToDefault),
      expression: "!isToggleToDefault"
    }],
    staticClass: "slider-container"
  }, [_c('div', {
    staticClass: "lm-time-slider"
  })]), _vm._v(" "), _c('div', {
    staticClass: "save-container"
  }, [_c('lm-button', {
    attrs: {
      "theme": "blue",
      "is-disabled": !_vm.isValidated
    },
    nativeOn: {
      "click": function($event) {
        _vm.onSave($event)
      }
    }
  }, [_vm._v("Update")])], 1)], 1)
},staticRenderFns: []}

/***/ }),
/* 47 */,
/* 48 */,
/* 49 */,
/* 50 */,
/* 51 */,
/* 52 */,
/* 53 */,
/* 54 */,
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(39);


/***/ })
/******/ ]);
});
//# sourceMappingURL=TimeRangePicker.js.map